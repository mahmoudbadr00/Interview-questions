// data/index.js
export const sections = [
    { id: 'javascript', name: 'JavaScript', color: '#F0DB4F' },
    { id: 'react', name: 'React', color: '#61DAFB' },
    { id: 'reactNative', name: 'React Native', color: '#61DBFB' },
    { id: 'flutter', name: 'Flutter', color: '#02569B' },
    { id: 'nextjs', name: 'Next.js', color: '#000000' },
    { id: 'nodejs', name: 'Node.js', color: '#339933' },
    { id: 'dotnet', name: '.NET', color: '#512BD4' },
    { id: 'java', name: 'Java', color: '#B07219' },
    { id: 'php', name: 'PHP', color: '#4F5D95' },
    { id: 'python', name: 'Python', color: '#3776AB' },
    { id: 'ruby', name: 'Ruby', color: '#701516' },
    { id:'matrialUI', name: 'Matrial UI', color: '#512BD4'},
    { id: 'angular', name: 'Angular', color: '#02569B' },
    { id: 'vueJS', name: 'Vue JS', color: '#000000' },
    { id: 'kotlin', name: 'Kotlin', color: '#339933' }, 
    { id: 'database', name: 'Database', color: '#02569B' },
    { id: 'laravel', name: 'Laravel', color: '#701516' },
    { id: 'uiux', name: 'UI/UX', color: '#339933' }, 
  ];
  
  export const faqData = {
    javascript: [
        {
            question: 'ما هو الفرق بين let, const, و var؟',
            answer: 'var: تم الإعلان عنه قبل ES6، وله نطاق وظيفي (function-scoped)، يمكن إعادة تعريفه وإعادة تهيئته. let: تم الإعلان عنه في ES6، وله نطاق بلوك (block-scoped)، يمكن إعادة تهيئته ولكن لا يمكن إعادة تعريفه. const: تم الإعلان عنه في ES6، وله نطاق بلوك (block-scoped)، ولا يمكن إعادة تهيئته أو إعادة تعريفه، لكن القيم الداخلية للكائنات أو المصفوفات يمكن تعديلها.'
          },
          {
            question: 'ما هو hoisting في JavaScript؟',
            answer: 'Hoisting هو سلوك JavaScript الذي يتم فيه رفع التصريحات (declarations) إلى أعلى نطاقها قبل تنفيذ الكود. يتم رفع المتغيرات المعلنة باستخدام var، لكن قيمها لا يتم تهيئتها حتى يصل التنفيذ إلى مكان الإعلان. let وconst ترفع أيضًا، لكن تبقى في حالة مؤقتة (temporal dead zone) حتى يصل التنفيذ إلى مكان الإعلان.'
          },
          {
            question: 'ما هو الفرق بين == و ===؟',
            answer: '== هو عامل المقارنة (equality) الذي يقوم بمقارنة القيم بعد تحويلها إلى نفس النوع. === هو عامل المقارنة (strict equality) الذي يقوم بمقارنة القيم بدون تحويل النوع، ويعتبر كلًا من النوع والقيمة.'
          },
          {
            question: 'اشرح مفهوم closures؟',
            answer: 'الـclosure هو دالة يمكنها الوصول إلى المتغيرات الخارجية من نطاقها حتى بعد خروج تلك المتغيرات من النطاق. يحدث هذا عندما يتم إنشاء دالة داخل أخرى، وتحتفظ الدالة الداخلية بالمرجع إلى المتغيرات في النطاق الخارجي.'
          },
          {
            question: 'ما هو الـthis في JavaScript؟',
            answer: 'this هو مرجع إلى الكائن الذي يُستدعى فيه الدالة. في السياق العام (global context)، يشير إلى الكائن window (أو global في Node.js). داخل دالة ككائن، يشير this إلى الكائن الذي يحتوي على الدالة. في الدوال العادية، يشير إلى الكائن الذي يملك الدالة. في دوال الأسهم (arrow functions)، يتم تحديد قيمة this بناءً على السياق الذي تم إنشاء الدالة فيه.'
          },
          {
            question: 'اشرح مفهوم الـPromises في JavaScript؟',
            answer: 'Promise هو كائن يمثل عملية غير متزامنة (asynchronous operation) في JavaScript. يحتوي على ثلاثة حالات: pending (معلق)، fulfilled (تم بنجاح)، وrejected (مرفوض). يستخدم .then() لمعالجة الحالة الناجحة و .catch() لمعالجة الأخطاء.'
          },
          {
            question: 'ما هو الفرق بين null و undefined؟',
            answer: 'null: هو قيمة متعمدة تشير إلى عدم وجود كائن. undefined: يشير إلى متغير تم تعريفه ولكنه لم يتم تهيئته أو لم يتم تعيين أي قيمة له.'
          },
          {
            question: 'ما هي الطريقة التي يمكنك بها تنفيذ دالة بشكل متكرر باستخدام JavaScript؟',
            answer: 'يمكنك استخدام دالة setInterval() لتكرار تنفيذ دالة بشكل دوري، أو setTimeout() لتنفيذ دالة مرة واحدة بعد تأخير محدد.'
          },
          {
            question: 'ما هو مفهوم Event Bubbling و Event Capturing؟',
            answer: 'Event Bubbling: هو عندما يتم تشغيل الحدث على العنصر الذي تم استدعاؤه عليه ثم ينتقل لأعلى شجرة DOM إلى العناصر الأبوية. Event Capturing: هو العملية العكسية، حيث يبدأ الحدث من العنصر الأب ثم ينتقل لأسفل شجرة DOM إلى العنصر الذي تم استدعاؤه عليه.'
          },
          {
            question: 'اشرح مفهوم async/await؟',
            answer: 'async/await هو طريقة حديثة للتعامل مع العمليات غير المتزامنة (asynchronous). تجعل الكود غير المتزامن يبدو وكأنه متزامن. async تجعل الدالة تعيد Promise. await يمكن استخدامها داخل الدالة المعلنة بـ async وتوقف تنفيذ الكود حتى يتم حل الـPromise.'
          },
          {
            question: 'ما هو الفرق بين GET و POST في HTTP؟',
            answer: 'GET: يستخدم لاسترجاع البيانات من الخادم. يتم إرسال البيانات كجزء من URL ولا يتم تشفيرها. POST: يستخدم لإرسال البيانات إلى الخادم. يتم إرسال البيانات في جسم الطلب (body) وبالتالي لا تظهر في URL، وعادة ما تُستخدم لعمليات مثل تسجيل المستخدم أو إرسال النماذج.'
          },
          {
            question: 'ما هو الفرق بين sessionStorage و localStorage؟',
            answer: 'localStorage: يُخزن البيانات بشكل دائم حتى يتم حذفها يدويًا من قبل المستخدم أو البرمجة. sessionStorage: يخزن البيانات فقط خلال جلسة المتصفح، أي يتم حذفها عند إغلاق نافذة المتصفح.'
          },
          {
            question: 'ما هي Cookies وكيف تختلف عن localStorage؟',
            answer: 'Cookies: تُستخدم لتخزين بيانات صغيرة في المتصفح وتُرسل مع كل طلب HTTP إلى الخادم. لها حجم صغير (حوالي 4KB) ولها فترة صلاحية يمكن تحديدها. localStorage: يُستخدم لتخزين بيانات أكبر على جانب العميل فقط، ولا تُرسل مع كل طلب HTTP.'
          },
          {
            question: 'ما هو الـ REST؟',
            answer: 'REST (Representational State Transfer) هو أسلوب تصميم معماري يُستخدم في بناء APIs. يعتمد على استخدام طرق HTTP القياسية مثل GET, POST, PUT, DELETE للتفاعل مع الخوادم.'
          },
          {
            question: 'ما هو الفرق بين block, inline, و inline-block في CSS؟',
            answer: 'block: تجعل العنصر يأخذ كامل العرض المتاح ويتصرف كعنصر كتلة. يبدء على سطر جديد. inline: تجعل العنصر يظهر بجوار العناصر الأخرى في نفس السطر ولا يأخذ كامل العرض. inline-block: تجعل العنصر يتصرف كعنصر inline لكن يمكن تحديد أبعاد العرض والارتفاع.'
          },
          {
            question: 'ما هو الفرق بين position: relative و position: absolute؟',
            answer: 'relative: يحدد موقع العنصر بالنسبة إلى موقعه الطبيعي في التدفق. absolute: يزيل العنصر من التدفق الطبيعي ويحدد موقعه بناءً على أقرب عنصر ذو موضع relative أو absolute.'
          },
          {
            question: 'ما هو CSS Flexbox وما استخداماته؟',
            answer: 'Flexbox هو نموذج تخطيط في CSS يُستخدم لإنشاء تصميمات مرنة. يساعد في توزيع العناصر داخل الحاوية بشكل متساوٍ أو حسب الحاجة. يستخدم خصائص مثل justify-content, align-items لتنظيم العناصر في الاتجاه الأفقي أو الرأسي.'
          },
          {
            question: 'اشرح مفهوم media queries في CSS؟',
            answer: 'Media Queries تُستخدم لتطبيق أنماط CSS مختلفة بناءً على خصائص الجهاز مثل العرض والارتفاع ونوع الشاشة. تُستخدم بشكل رئيسي لجعل المواقع مستجيبة (responsive) عبر الأجهزة المختلفة.'
          },
          {
            question: 'ما هي الـ Semantic HTML ولماذا هي مهمة؟',
            answer: 'Semantic HTML تعني استخدام عناصر HTML وفقًا لمعناها الوظيفي. مثل استخدام <header>, <footer>, <article> لتحسين تحسين محركات البحث (SEO) وجعل الموقع أكثر وضوحًا لمحركات البحث وقارئات الشاشة.'
          },
          {
            question: 'ما هو الفرق بين padding و margin؟',
            answer: 'padding: هو المسافة بين محتوى العنصر وحدوده. margin: هو المسافة بين حدود العنصر والعناصر الأخرى المحيطة به.'
          },
          {
            question: 'ما هو الـWebpack؟',
            answer: 'Webpack هو أداة تجميع (bundler) للموارد (assets) في تطبيق الويب. تقوم بتجميع وحدات JavaScript، CSS، والصور في ملفات قابلة للتوزيع، كما تدعم تقسيم الكود، التحميل الكسول، وتحسينات الأداء.'
          },
          {
            question: 'ما هو الفرق بين npm و yarn؟',
            answer: 'npm و yarn هما مديرا حزم لـ JavaScript. كلاهما يُستخدمان لإدارة المكتبات والاعتماديات. yarn يتميز بالسرعة في التثبيت وقدرات على إدارة النسخ المتعددة من الحزم بشكل أفضل.'
          },
          {
            question: 'ما هو الـVirtual DOM؟',
            answer: 'Virtual DOM هو نسخة افتراضية خفيفة من DOM الحقيقي يُستخدم في مكتبات مثل React لتحسين الأداء. عندما يحدث تغيير في واجهة المستخدم، يتم تحديث Virtual DOM أولاً، ثم تتم مقارنة الفروق مع DOM الفعلي (diffing) لتحديث العناصر الضرورية فقط.'
          },
          {
            question: 'ما هو الـAJAX؟',
            answer: 'AJAX (Asynchronous JavaScript and XML) هو أسلوب يسمح بتحديث أجزاء من صفحة الويب دون إعادة تحميل الصفحة بالكامل. يتم إرسال الطلبات إلى الخادم ومعالجة النتائج بشكل غير متزامن.'
          },
          {
            question: 'ما هو الـCORS ولماذا هو مهم؟',
            answer: 'CORS (Cross-Origin Resource Sharing) هو آلية أمان في المتصفح تمنع الصفحات من إجراء طلبات إلى نطاقات خارجية إلا إذا كان الخادم يسمح بذلك. يتم التحكم فيه من خلال رؤوس (headers) محددة مثل Access-Control-Allow-Origin.'
          },
          {
            question: 'ما هو مفهوم الـEvent Loop في JavaScript؟',
            answer: 'Event Loop هو الآلية التي تدير تنفيذ الكود غير المتزامن في JavaScript، مثل الأحداث و Promises. JavaScript هي لغة ذات مؤشر وحيد (single-threaded)، لذا يتم وضع العمليات غير المتزامنة في Event Queue وتتم معالجتها عندما يصبح مؤشر الـCall Stack فارغًا.'
        },
        {
            question: 'ما هو الـdebouncing و throttling؟',
            answer: 'Debouncing: هو تقنية تأخير استدعاء دالة حتى يتوقف الحدث لمدة محددة. يستخدم لتجنب الاستدعاءات المتكررة غير الضرورية مثل كتابة المستخدم على لوحة المفاتيح. Throttling: هو تقنية تقيد استدعاء الدالة إلى مرة واحدة كل فترة زمنية معينة، حتى لو تم تنفيذ الحدث عدة مرات. يستخدم للتحكم في معدل تنفيذ دالة معينة مثل تغيير حجم المتصفح.'
        },
        {
            question: 'ما هو Prototype في JavaScript؟',
            answer: 'Prototype هو آلية في JavaScript تتيح للكائنات الوراثة من بعضها البعض. كل دالة تحتوي على خاصية prototype يمكن من خلالها مشاركة الخصائص والطرق بين الكائنات المشتقة من نفس الدالة المنشئة (constructor function).'
        },
        {
            question: 'ما هو الفرق بين call(), apply(), و bind()؟',
            answer: 'call(): يستدعي دالة محددة على كائن معين ويمرر المعاملات بشكل فردي. apply(): مشابه لـcall()، لكن المعاملات تمرر كمصفوفة. bind(): يعيد دالة جديدة مع إعداد this للكائن الممرر، ولا يستدعيها فورًا.'
        },
        {
            question: 'ما هو مفهوم Memoization في JavaScript؟',
            answer: 'Memoization هو تقنية لتحسين الأداء عن طريق تخزين نتائج الدوال المكلفة في ذاكرة التخزين المؤقت. إذا تم استدعاء الدالة بنفس المدخلات مرة أخرى، فإنها تعيد النتيجة المحفوظة بدلاً من إعادة حسابها.'
        },
        {
            question: 'ما هي Generators في JavaScript؟',
            answer: 'Generators هي دوال يمكن إيقافها مؤقتًا واستئنافها لاحقًا، مما يتيح تنفيذًا تدريجيًا. يتم تعريفها باستخدام function* وتستخدم yield لإرجاع قيمة مؤقتة. يتم التحكم في التقدم عبر دالة next().'
        },
        {
            question: 'اشرح ما هو مفهوم الـSymbol في JavaScript؟',
            answer: 'Symbol هو نوع بيانات فريد تم تقديمه في ES6، يُستخدم لإنشاء معرفات فريدة للكائنات. يتم استخدامه غالبًا لتجنب التعارض بين الخصائص أو لتعريف خاصية خاصة في الكائنات.'
        },
        {
            question: 'ما هو الفرق بين map() و forEach() في JavaScript؟',
            answer: 'forEach(): يقوم بتكرار العناصر في مصفوفة دون إرجاع قيمة (لا يقوم بإنشاء مصفوفة جديدة). map(): يقوم بتكرار العناصر وإرجاع مصفوفة جديدة بناءً على النتيجة المترتبة على تنفيذ الدالة على كل عنصر.'
        },
        {
            question: 'اشرح ما هو Currying في JavaScript؟',
            answer: 'Currying هو عملية تحويل دالة تأخذ عدة معاملات إلى سلسلة من الدوال التي تأخذ كل منها معاملًا واحدًا فقط. يساعد في إعادة استخدام الدوال عن طريق تثبيت بعض المعاملات.'
        },
        {
            question: 'ما هو الـExecution Context في JavaScript؟',
            answer: 'Execution Context هو البيئة التي يتم فيها تنفيذ الكود في JavaScript. لكل دالة وسياق عام (global) يوجد Execution Context منفصل يحتوي على ثلاثة عناصر رئيسية: Variable Object, Scope Chain, و this.'
        },
        {
            question: 'ما هو مفهوم Progressive Enhancement؟',
            answer: 'Progressive Enhancement هو استراتيجية تطوير الويب التي تبدأ بإنشاء نسخة بسيطة وفعالة للمتصفح من الصفحة ثم تحسينها تدريجيًا عبر إضافة ميزات أكثر تقدمًا للمتصفحات التي تدعمها.'
        },
        {
            question: 'اشرح الفرق بين Responsive Design و Adaptive Design؟',
            answer: 'Responsive Design: يعتمد على استخدام media queries لجعل التصميم يتكيف تلقائيًا مع مختلف أحجام الشاشات باستخدام نسب مرنة. Adaptive Design: يتم فيه إنشاء تخطيطات متعددة (layouts) لأحجام شاشة محددة ثم اختيار التخطيط المناسب بناءً على حجم الشاشة.'
        },
        {
            question: 'ما هو الفرق بين inline و block و inline-block في CSS؟',
            answer: 'inline: لا يأخذ مساحة العرض الكاملة، يمكنه أن يتواجد بجوار عناصر أخرى في نفس السطر. block: يأخذ العرض الكامل المتاح، ويبدأ في سطر جديد. inline-block: يجمع بين خصائص inline و block، يمكن تحديد العرض والارتفاع ولكنه يظل بجوار عناصر أخرى.'
        },
        {
            question: 'ما هو مفهوم الـCSS Grid؟',
            answer: 'CSS Grid هو نظام تخطيط ثنائي الأبعاد يوفر تحكمًا أكبر في ترتيب العناصر في صفوف وأعمدة. يُتيح توزيع العناصر على شبكة ويمنح مطور الويب تحكمًا في المسافات والتوزيع بشكل أسهل مقارنة بـ Flexbox.'
        },
        {
            question: 'ما هو الـBox Model في CSS؟',
            answer: 'Box Model هو نموذج يحدد كيفية حساب حجم وعرض العناصر. يتكون من المحتوى (content)، الحشوة (padding)، الحدود (border)، والهامش (margin).'
        },
        {
            question: 'ما هي pseudo-classes و pseudo-elements في CSS؟',
            answer: 'Pseudo-classes: تُستخدم لتحديد حالة خاصة لعناصر HTML (مثل :hover, :focus). Pseudo-elements: تُستخدم لتحديد جزء معين من عنصر HTML، مثل ::before, ::after لإدخال محتوى قبل أو بعد العنصر.'
        },
        {
            question: 'ما هو الفرق بين em و rem في CSS؟',
            answer: 'em: تعتمد على حجم الخط الأصلي للعنصر الأب. rem: تعتمد على حجم الخط الجذري (الـroot)، وهو حجم الخط الافتراضي في الصفحة (html).'
        },
        {
            question: 'ما هو الـCritical Rendering Path؟',
            answer: 'Critical Rendering Path هو سلسلة من الخطوات التي يتخذها المتصفح لتحويل HTML, CSS, و JavaScript إلى صفحة مرئية للمستخدم. تشمل هذه الخطوات تحليل HTML لإنشاء شجرة DOM، وتحليل CSS لإنشاء شجرة CSSOM، ودمجها لتكوين شجرة العرض (render tree) التي يتم رسمها على الشاشة.'
        },
        {
            question: 'ما هو مفهوم lazy loading؟',
            answer: 'Lazy Loading هي تقنية لتحميل المحتوى (مثل الصور والفيديوهات) فقط عند الحاجة، أي عندما يصبح العنصر مرئيًا للمستخدم. تساعد في تحسين الأداء عن طريق تقليل حجم التحميل الأولي للصفحة.'
        },
        {
            question: 'ما هو الفرق بين SVG و Canvas؟',
            answer: 'SVG: هو تنسيق رسومي يعتمد على الرسوم المتجهة (vector-based) ويستخدم لـ رسوميات يمكن توسيعها بدون فقدان الجودة. الرسوم يمكن التفاعل معها عبر DOM. Canvas: هو عنصر يعتمد على الرسوم النقطية (pixel-based) ويستخدم لـ رسوميات تعتمد على رسومات سريعة ومباشرة باستخدام JavaScript.'
        },
        {
            question: 'ما هي Web Workers في JavaScript؟',
            answer: 'Web Workers هي تقنية تسمح بتنفيذ JavaScript في خيوط منفصلة (background threads) دون حجب مؤشر الخيط الرئيسي (main thread). يتم استخدامها لتنفيذ العمليات المعقدة أو المكثفة التي قد تؤثر على أداء الصفحة.'
        },
        {
            question: 'ما هو الـCSS Preprocessor؟ اذكر بعض الأمثلة.',
            answer: 'CSS Preprocessor هو أداة تساعد في كتابة CSS بطريقة أكثر تنظيماً وكفاءة. يضيف ميزات مثل المتغيرات، الدوال، وتكرار القواعد. أشهر الأمثلة هي: Sass، LESS، Stylus.'
        },
        {
            question: 'ما هو الفرق بين SPA و MPA؟',
            answer: 'SPA (Single Page Application): هو تطبيق ويب يعمل داخل صفحة واحدة. يتم تحميل الموارد مرة واحدة عند بدء التطبيق، وبعدها يتم تحميل البيانات بشكل غير متزامن. MPA (Multi Page Application): هو تطبيق يتطلب إعادة تحميل صفحة جديدة لكل عملية، مما يعني أن كل صفحة تُحمّل بشكل مستقل.'
        }
    ],
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    react: [
        {
            question: 'ما هو React؟',
            answer: 'React هي مكتبة JavaScript مفتوحة المصدر تُستخدم لبناء واجهات المستخدم (UI) التفاعلية، خاصة لتطبيقات الويب أحادية الصفحة (SPA). تعتمد على مبدأ المكونات (Components) التي تعيد عرض أجزاء من الواجهة بناءً على البيانات.'
        },
        {
            question: 'ما هو الفرق بين state و props في React؟',
            answer: 'state: هو مجموعة من البيانات الخاصة بالمكون ويمكن تغييرها داخليًا خلال فترة حياة المكون. التغيرات في state تؤدي إلى إعادة التصيير (re-render). props: هي بيانات تُمرر من المكون الأب إلى الابن وتكون ثابتة (read-only). لا يمكن للمكون الابن تغيير props.'
        },
        {
            question: 'ما هي JSX؟',
            answer: 'JSX هو اختصار لـ JavaScript XML، وهي صيغة كتابة مدمجة مع JavaScript تُستخدم لكتابة مكونات React. تسمح لك بكتابة كود يشبه HTML داخل JavaScript.'
        },
        {
            question: 'ما هو Virtual DOM؟',
            answer: 'Virtual DOM هو نسخة خفيفة الوزن من DOM الحقيقي يتم استخدامها بواسطة React لتحديث واجهة المستخدم بسرعة وكفاءة. React يقوم بمقارنة (diffing) بين الـ Virtual DOM الحالي والجديد لتحديد التغييرات، ثم يطبق التغييرات اللازمة فقط على الـ DOM الحقيقي.'
        },
        {
            question: 'ما هو الـ Component في React؟',
            answer: 'Component هو وحدة بناء أساسية في React. يمكن أن يكون مكونًا تابعًا لدالة (Functional Component) أو مكونًا تابعًا لفئة (Class Component). يتم استخدام المكونات لإعادة استخدام الكود وتجزئة واجهات المستخدم إلى أجزاء أصغر وأكثر قابلية للإدارة.'
        },
        {
            question: 'ما الفرق بين Functional Component و Class Component؟',
            answer: 'Functional Component: هو مكون بسيط يعتمد على الدالة ويُعتبر أكثر بساطة وأقل تعقيدًا. كان يُستخدم فقط لعرض البيانات، ولكن مع إدخال الـ Hooks أصبح بالإمكان استخدام الـ state داخله. Class Component: هو مكون يعتمد على الفئة (class) ويُمكنه إدارة الحالة الداخلية (state) واستخدام دورة حياة المكون. أصبح أقل استخدامًا مع ظهور الـ Hooks.'
        },
        {
            question: 'ما هو setState()؟',
            answer: 'setState() هي طريقة تستخدم لتحديث الـ state في مكونات React التي تعتمد على الفئات (Class Components). عند استدعاء setState()، يتم إعادة تصيير المكون لتحديث واجهة المستخدم بناءً على التغييرات.'
        },
        {
            question: 'ما هو React.Fragment؟',
            answer: 'React.Fragment هو عنصر يمكن استخدامه لتغليف مجموعة من العناصر دون إضافة عقدة إضافية إلى DOM. يساعد على تجنب إضافة عناصر DOM غير ضرورية مثل div.'
        },
        {
            question: 'ما هي Hooks في React؟',
            answer: 'Hooks هي ميزة تم تقديمها في React 16.8 تسمح باستخدام state وميزات أخرى بدون الحاجة إلى كتابة مكونات تعتمد على الفئات. بعض الـ Hooks الشائعة هي: useState() لإدارة الحالة. useEffect() للتعامل مع تأثيرات جانبية (مثل طلب البيانات). useContext() لاستخدام سياق React بدون تغليف المكونات في مستهلك (Consumer).'
        },
        {
            question: 'ما هو الفرق بين useEffect() و componentDidMount()؟',
            answer: 'componentDidMount() يستخدم في المكونات القائمة على الفئات، ويتم استدعاؤه مرة واحدة بعد أول تصيير. useEffect() يستخدم في المكونات القائمة على الدوال، ويمكن التحكم في توقيت استدعائه عبر تمرير قائمة dependencies (المعاملات).'
        },
        {
            question: 'اشرح كيفية التعامل مع الـ Forms في React.',
            answer: 'التعامل مع النماذج (Forms) في React يتطلب ربط قيم المدخلات مع state. يمكنك استخدام onChange لتحديث الـ state بناءً على المدخلات، ثم ربط قيم المدخلات بالـ state لجعل النموذج موجهًا بالكامل (controlled form).'
        },
        {
            question: 'ما هو Context API؟',
            answer: 'Context API هو آلية في React تتيح لك تمرير البيانات عبر شجرة المكونات دون الحاجة إلى تمريرها يدويًا عبر props على كل مستوى. يُستخدم بشكل شائع لإدارة السمات العامة مثل السمات العالمية (theme) أو بيانات المستخدم.'
        },
        {
            question: 'ما الفرق بين controlled و uncontrolled components في React؟',
            answer: 'Controlled Component: هو مكون يتم التحكم فيه بالكامل من خلال React عبر استخدام state وprops. كل تغيير في المدخلات يتم تحديثه في state. Uncontrolled Component: يعتمد على DOM للحصول على القيم، حيث تُستخدم المراجع (refs) للوصول إلى قيم المدخلات.'
        },
        {
            question: 'ما هي Higher-Order Components (HOCs) في React؟',
            answer: 'HOCs هي نمط تصميم في React حيث تأخذ دالة مكونًا وتعيد مكونًا جديدًا مع ميزات إضافية. تُستخدم لتكرار السلوكيات المشتركة بين المكونات دون تكرار الكود.'
        },
        {
            question: 'ما هو React.memo()؟',
            answer: 'React.memo() هو دالة تستخدم لتحسين الأداء من خلال منع إعادة التصيير غير الضرورية. إذا لم تتغير props لمكون ما، فلن يُعاد تصييره عند استخدام React.memo().'
        },
        {
            question: 'ما هو PropTypes في React؟',
            answer: 'PropTypes هي أداة للتحقق من الأنواع في React تُستخدم لتحديد نوع البيانات التي يُتوقع أن تتلقاها المكونات عبر props. يساعد على تقليل الأخطاء وضمان صحة البيانات التي يتم تمريرها.'
        },
        {
            question: 'ما هو React Router؟',
            answer: 'React Router هو مكتبة لتوجيه الصفحات في تطبيقات React. يتيح الانتقال بين الصفحات المختلفة دون إعادة تحميل الصفحة بالكامل، مما يحاكي سلوك التطبيقات أحادية الصفحة (SPA).'
        },
        {
            question: 'ما هو Redux؟',
            answer: 'Redux هو مكتبة لإدارة الحالة في التطبيقات الكبيرة. يوفر طريقة مركزية لتخزين وإدارة بيانات التطبيق بأكمله. يعتمد على ثلاث مبادئ رئيسية: store (المخزن)، actions (الأفعال)، و reducers (المخفضات).'
        },
        {
            question: 'ما الفرق بين Redux و Context API؟',
            answer: 'Redux هو أداة معقدة تُستخدم بشكل خاص في التطبيقات الكبيرة لإدارة حالة معقدة متعددة المكونات. يحتوي على آليات لتصحيح الأخطاء وتحسين الأداء. Context API هو أداة أبسط تُستخدم لتجنب تمرير props عبر عدة مستويات من المكونات، لكنها غير مخصصة للتطبيقات الكبيرة جدًا مثل Redux.'
        },
        {
            question: 'ما هي Keys في React ولماذا تُستخدم؟',
            answer: 'Keys هي معرّفات فريدة تُستخدم لتحديد العناصر عند إنشاء قائمة من المكونات في React. تساعد في تحسين الأداء ومنع مشاكل عند إعادة تصيير القوائم.'
        },
        {
            question: 'اشرح مفهوم lazy loading في React.',
            answer: 'Lazy loading هو تقنية لتحميل المكونات بشكل غير متزامن فقط عندما تكون مطلوبة (عند طلب المستخدم الانتقال إلى صفحة جديدة مثلًا). يتم استخدام React.lazy() و Suspense لتأخير تحميل المكونات حتى الحاجة إليها.'
        },
        {
            question: 'ما هي Error Boundaries؟',
            answer: 'Error Boundaries هي مكونات في React تُستخدم لالتقاط ومعالجة الأخطاء التي تحدث في الأشجار الفرعية الخاصة بها أثناء التصيير. يتم تعريفها باستخدام componentDidCatch أو كـ class components.'
        },
        {
            question: 'ما هو الفرق بين useRef() و createRef()؟',
            answer: 'useRef() يستخدم داخل المكونات الوظيفية، ويعود نفس المرجع (ref) عبر عمليات التصيير. createRef() يستخدم في المكونات القائمة على الفئات، ويعيد مرجعًا جديدًا في كل عملية تصيير.'
        },
        {
            question: 'اشرح ما هو useMemo() في React.',
            answer: 'useMemo() هو hook يُستخدم لتحسين الأداء عبر تخزين القيم المحسوبة. إذا لم تتغير القيم المدخلة (dependencies)، يتم إعادة استخدام القيمة المخزنة بدلاً من إعادة حسابها.'
        },
        {
            question: 'اشرح ما هو useCallback() في React.',
            answer: 'useCallback() هو hook مشابه لـ useMemo()، ولكنه يُستخدم لتخزين دالة. إذا لم تتغير القيم المدخلة (dependencies)، يتم إعادة استخدام الدالة المخزنة بدلاً من إعادة إنشائها.'
        }
    ],
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    reactNative: [
        {
            question: 'ما هو React Native؟',
            answer: 'React Native هو إطار عمل مفتوح المصدر مبني على React، يُستخدم لتطوير تطبيقات موبايل لنظامي Android و iOS باستخدام JavaScript و React. يتيح لك بناء تطبيقات موبايل حقيقية باستخدام نفس الكود لكل من النظامين.'
        },
        {
            question: 'ما الفرق بين React و React Native؟',
            answer: 'React هو مكتبة JavaScript تُستخدم لبناء واجهات المستخدم لتطبيقات الويب. React Native هو إطار عمل يُستخدم لبناء تطبيقات الموبايل. الفرق الأساسي هو أن React Native يستخدم مكونات مخصصة لتطوير واجهات المستخدم الخاصة بالهاتف مثل <View> و <Text>، بينما React يستخدم HTML.'
        },
        {
            question: 'ما هي مكونات React Native الأساسية؟',
            answer: 'بعض المكونات الأساسية في React Native هي: <View>: يُستخدم كحاوية لعناصر الـ UI. <Text>: يُستخدم لعرض النصوص. <Image>: لعرض الصور. <TextInput>: لحقول الإدخال. <ScrollView>: لإنشاء قوائم قابلة للتمرير.'
        },
        {
            question: 'كيف يمكنك تصميم المكونات في React Native؟',
            answer: 'يتم استخدام StyleSheet في React Native لتصميم المكونات. وهو مشابه جدًا لـ CSS، لكنه مكتوب ككائنات JavaScript. يتم تطبيق الأنماط باستخدام دالة StyleSheet.create().'
        },
        {
            question: 'ما هو Flexbox في React Native؟',
            answer: 'Flexbox هو نظام لتخطيط الواجهة يُستخدم في React Native لترتيب المكونات داخل الحاويات. يعمل بنفس الطريقة المستخدمة في CSS لتوزيع العناصر أفقيًا وعموديًا.'
        },
        {
            question: 'ما هي State و Props في React Native؟',
            answer: 'State هو الكائن الداخلي الذي يحتفظ بمعلومات حول مكون معين. يمكن أن يتغير خلال دورة حياة المكون ويؤثر على كيفية عرض المكون. Props هي البيانات التي تُمرر من المكون الأب إلى المكونات الفرعية. وهي ثابتة ولا يمكن تعديلها بواسطة المكون الفرعي.'
        },
        {
            question: 'كيف يمكنك التعامل مع التنقل (navigation) في React Native؟',
            answer: 'يمكنك استخدام مكتبة React Navigation لإدارة التنقل بين الشاشات في تطبيق React Native. توفر المكتبة أنواعًا متعددة من التنقل مثل Stack, Drawer, و Tab navigation.'
        },
        {
            question: 'ما هو Expo في React Native؟',
            answer: 'Expo هو أداة وإطار عمل فوق React Native يتيح للمطورين بناء التطبيقات بسرعة دون الحاجة إلى التعامل مع إعدادات معقدة. يوفر مجموعة من الأدوات والواجهات الجاهزة للتعامل مع الميزات الأصلية مثل الكاميرا، الموقع الجغرافي، والإشعارات.'
        },
        {
            question: 'ما الفرق بين React Native CLI و Expo CLI؟',
            answer: 'React Native CLI: يمنحك مزيدًا من التحكم والتخصيص في التطبيق، ولكنه يتطلب إعدادات أكثر تعقيدًا للوصول إلى الميزات الأصلية. Expo CLI: يجعل عملية التطوير أبسط ويوفر مكتبات جاهزة، ولكنه يمكن أن يكون محدودًا عند الحاجة إلى ميزات أصلية مخصصة أو تكامل مع طرف ثالث.'
        },
        {
            question: 'كيف يمكنك الوصول إلى ميزات الأجهزة الأصلية مثل الكاميرا والموقع في React Native؟',
            answer: 'في React Native يمكنك استخدام المكتبات الجاهزة للوصول إلى ميزات الأجهزة الأصلية مثل: الكاميرا: باستخدام مكتبة react-native-camera أو عبر Expo باستخدام expo-camera. الموقع الجغرافي: باستخدام react-native-geolocation-service أو expo-location.'
        },
        {
            question: 'ما هو useEffect() في React Native؟',
            answer: 'useEffect() هو Hook في React Native يُستخدم لتنفيذ العمليات الجانبية (مثل استدعاء APIs أو الاشتراكات) داخل المكونات الوظيفية. يُنفذ عند تحميل المكون أو عند تغيير القيم المراقبة (dependencies).'
        },
        {
            question: 'كيف يمكنك تحسين أداء تطبيق React Native؟',
            answer: 'بعض الطرق لتحسين أداء تطبيق React Native: التقليل من إعادة التصيير (re-renders): باستخدام memo أو PureComponent. استخدام FlatList لعرض القوائم الكبيرة. تقليل حجم الصور عبر تحميل الصور بحجم مناسب أو استخدام صيغة WebP. تقليل استخدام الأنماط المتكررة عبر StyleSheet.create().'
        },
        {
            question: 'ما هو FlatList و SectionList؟',
            answer: 'FlatList هو مكون يُستخدم لعرض قوائم بيانات طويلة بكفاءة. يعرض فقط العناصر التي تظهر في الشاشة (التمرير السريع). SectionList هو مكون مشابه ولكنه يدعم تقسيم البيانات إلى أقسام مختلفة مع رؤوس (headers) لكل قسم.'
        },
        {
            question: 'كيف يمكنك التعامل مع إدخال النصوص في React Native؟',
            answer: 'يمكن التعامل مع إدخال النصوص باستخدام مكون <TextInput>. يمكنك استخدام onChangeText لتحديث الـ state مع كل تغيير في النص. يمكنك أيضًا تخصيص خصائص مثل placeholder, keyboardType, و secureTextEntry لتحديد نوع الإدخال.'
        },
        {
            question: 'ما هو AsyncStorage في React Native؟',
            answer: 'AsyncStorage هو واجهة برمجة تطبيقات لتخزين البيانات البسيطة بشكل دائم على جهاز المستخدم. يُستخدم لتخزين بيانات مثل إعدادات المستخدم أو الرموز المميزة (tokens).'
        },
        {
            question: 'ما هي الاختلافات بين ScrollView و FlatList؟',
            answer: 'ScrollView: يُستخدم لعرض مجموعة من العناصر حيث يتم تحميل كل العناصر في الذاكرة في نفس الوقت. مناسب للقوائم القصيرة. FlatList: يُستخدم للقوائم الطويلة حيث يتم تحميل العناصر بشكل ديناميكي فقط عندما تكون على الشاشة، مما يجعلها أكثر كفاءة للقوائم الكبيرة.'
        },
        {
            question: 'كيف يمكنك استخدام TouchableOpacity و TouchableHighlight في React Native؟',
            answer: 'كلا المكونين يُستخدمان لجعل العناصر قابلة للنقر. TouchableOpacity: يقلل من الشفافية عند النقر، مما يعطي تأثيرًا مرئيًا. TouchableHighlight: يغير لون الخلفية عند النقر.'
        },
        {
            question: 'ما هو NativeModules في React Native؟',
            answer: 'NativeModules هي واجهة برمجة تُتيح لك الوصول إلى وحدات الأصل (native modules) المكتوبة بلغة Java أو Objective-C من خلال JavaScript في React Native. تُستخدم للوصول إلى ميزات الجهاز الأصلية غير المتاحة مباشرة في React Native.'
        },
        {
            question: 'كيف تتعامل مع push notifications في React Native؟',
            answer: 'يمكنك استخدام مكتبات مثل react-native-push-notification أو Firebase Cloud Messaging (FCM) للتعامل مع الإشعارات في React Native. تتيح هذه الأدوات إرسال الإشعارات إلى الأجهزة حتى عندما لا يكون التطبيق نشطًا.'
        },
        {
            question: 'ما هو Hermes في React Native؟',
            answer: 'Hermes هو محرك JavaScript مُحسن للتطبيقات على الأجهزة ذات الذاكرة المحدودة. تم تطويره بواسطة Facebook لتسريع أداء تطبيقات React Native، وخاصة على أجهزة Android.'
        },
        {
            question: 'كيف يمكنك تضمين مكتبات أصلية (Native Libraries) في مشروع React Native؟',
            answer: 'يمكن تضمين المكتبات الأصلية في React Native باستخدام react-native link (في المشاريع القديمة) أو باستخدام cocoapods على iOS أو gradle على Android.'
        },
        {
            question: 'ما هو Bridge في React Native؟',
            answer: 'Bridge هو الآلية التي تربط بين JavaScript والرمز الأصلي (Native Code) في React Native. يتيح التواصل بين الاثنين لتمرير البيانات وتنفيذ الإجراءات على مستوى النظام.'
        },
        {
            question: 'كيف يمكنك استخدام الكود الأصلي (Native Code) مع React Native؟',
            answer: 'يمكنك كتابة وحدات Native (مثل Java على Android و Objective-C أو Swift على iOS) والتفاعل معها عبر JavaScript باستخدام NativeModules و RCTBridge.'
        },
        {
            question: 'ما هو الفرق بين Hot Reloading و Live Reloading؟',
            answer: 'Hot Reloading: يعيد تحميل فقط الجزء الذي تم تغييره في الكود بدون إعادة تحميل التطبيق بالكامل. Live Reloading: يعيد تحميل التطبيق بالكامل عند إجراء أي تغيير.'
        }
      ],
      ///////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////
      flutter: [
        {
          question: 'ما هو Flutter؟',
          answer: ': Flutter هو إطار عمل مفتوح المصدر تم تطويره بواسطة Google لتطوير تطبيقات متوافقة مع الأنظمة المتعددة (Cross-platform) مثل Android و iOS باستخدام قاعدة كود واحدة فقط. يعتمد على لغة البرمجة Dart ويتيح للمطورين إنشاء واجهات مستخدم (UI) عالية الأداء.'
        },
        {
          question: 'ما هي لغة Dart؟ ولماذا تُستخدم مع Flutter؟',
          answer: ' Dart هي لغة برمجة كائنية التوجه تم تطويرها بواسطة Google. تُستخدم مع Flutter لأنها بسيطة وسريعة، وتدعم ميزات مثل التجميع المسبق (AOT) والترجمة الفورية (JIT)، مما يسهم في تسريع عمليات التطوير والأداء. كما أنها تتيح ميزة Hot Reload، التي تسهم في تجربة تطوير سلسة.'
        },
        {
            question: 'ما هو الفرق بين StatefulWidget و StatelessWidget؟',
            answer: 'StatelessWidget يُستخدم لإنشاء واجهات مستخدم ثابتة (غير متغيرة). إذا لم تتغير البيانات أو الحالة، يُفضل استخدام هذا النوع. StatefulWidget يُستخدم لإنشاء واجهات يمكن أن تتغير مع مرور الوقت بناءً على التفاعلات مع المستخدم أو تغيرات الحالة (state).'
          },
          {
            question: 'ما هو Hot Reload؟ وما هو الفرق بينه وبين Hot Restart؟',
            answer: 'Hot Reload يُستخدم لإعادة تحميل تغييرات الكود مباشرة في التطبيق دون إعادة تشغيله بالكامل، مما يساعد في رؤية التغييرات بسرعة دون فقدان الحالة الحالية. Hot Restart يُعيد تشغيل التطبيق بالكامل، مما يعني فقدان الحالة الحالية وإعادة تحميل جميع البيانات من البداية.'
          },
          {
            question: 'ما هي مزايا استخدام Flutter؟',
            answer: 'تطوير متعدد الأنظمة باستخدام قاعدة كود واحدة. أداء عالي بفضل الترجمة المسبقة AOT. دعم واجهات مستخدم معقدة ومتجاوبة. تحديثات سريعة عبر Hot Reload. مكتبة كبيرة من الـWidgets المتكاملة.'
          },
          {
            question: 'ما هو الفرق بين mainAxisAlignment و crossAxisAlignment؟',
            answer: 'mainAxisAlignment يتحكم في محاذاة العناصر على المحور الرئيسي (عادةً العمودي في الأعمدة أو الأفقي في الصفوف). crossAxisAlignment يتحكم في محاذاة العناصر على المحور العرضي (المعاكس للمحور الرئيسي).'
          },
          {
            question: 'ما هو الفرق بين Future و Stream في Dart؟',
            answer: 'Future يُستخدم للتعامل مع القيم التي ستصبح متاحة في المستقبل (نتيجة عملية غير متزامنة). Stream يُستخدم للتعامل مع مجموعة من القيم التي يتم إصدارها بمرور الوقت (مثل البيانات المستمرة أو الأحداث).'
          },
          {
            question: 'كيف يمكن التعامل مع البيانات باستخدام Firebase في Flutter؟',
            answer: 'يمكن استخدام مكتبة firebase_core لإعداد Firebase، ومكتبة cloud_firestore للتفاعل مع قاعدة بيانات Firestore. من خلال Firebase، يمكن تخزين واسترجاع البيانات كما يمكن التعامل مع المصادقة وإشعارات الدفع.'
          },
          {
            question: 'ما هو Provider وكيف يعمل في Flutter؟',
            answer: 'Provider هو نظام إدارة حالة (State Management) بسيط يستخدم لتوفير البيانات للأجزاء المختلفة من التطبيق. يوفر نظامًا يعتمد على InheritedWidget لإتاحة البيانات أو الكائنات للتطبيق بأكمله بسهولة.'
          },
          {
            question: 'ما هي الـWidgets التي توفرها Flutter لبناء واجهات المستخدم؟',
            answer: 'Flutter يوفر العديد من الـWidgets مثل: Container لإنشاء حاويات تحتوي على عناصر. Row/Column لترتيب العناصر أفقيًا أو عموديًا. ListView لعرض قائمة من العناصر. Stack لتكديس العناصر فوق بعضها البعض. GestureDetector للتفاعل مع اللمس أو الإيماءات.'
          },
          {
            question: 'كيف تتعامل مع التخزين المحلي في Flutter؟',
            answer: 'يمكن استخدام مكتبة shared_preferences لتخزين البيانات البسيطة مثل المفاتيح والقيم (key-value)، أو sqflite للتعامل مع قواعد البيانات المحلية SQLite.'
          },
          {
            question: 'كيف يمكن التعامل مع الـAPI في Flutter؟',
            answer: 'يمكن استخدام مكتبة http أو dio لإرسال الطلبات إلى واجهات برمجة التطبيقات (APIs). يتم ذلك عن طريق إرسال طلبات HTTP (GET, POST) واستخدام Future لانتظار النتائج ومعالجتها.'
          },
          {
            question: 'ما هو الفرق بين Expanded و Flexible في Flutter؟',
            answer: 'Expanded يملأ المساحة المتاحة بالكامل على المحور الرئيسي. Flexible يعطي مرونة في ملء المساحة المتاحة بناءً على النسبة المحددة، دون تجاوز الحجم المتاح.'
          },
          {
            question: 'كيف يمكن تحسين أداء تطبيقات Flutter؟',
            answer: 'استخدام الصور بحجم مناسب وتقليل حجم الموارد. تقليل إعادة بناء الواجهات غير الضرورية عن طريق استخدام const. استخدام Widgets مثل RepaintBoundary لتقليل إعادة الرسم. تقليل العمليات التي تعتمد على الـBuild باستخدام حلول مثل ValueNotifier أو Provider.'
          },
          {
            question: 'ما هي StatefulBuilder ولماذا تستخدم؟',
            answer: 'StatefulBuilder تُستخدم لتحديث جزء معين من الـUI داخل StatefulWidget بدون إعادة بناء الـWidget بالكامل. تعتبر مفيدة لتحديث العناصر الصغيرة في الشاشات المعقدة دون التأثير على الأداء.'
          },
          {
            question: 'كيف يمكن استخدام Animation في Flutter؟',
            answer: 'يمكن استخدام مكتبة animation الخاصة بـ Flutter لإنشاء تأثيرات الحركة. يتضمن ذلك استخدام AnimatedWidget وAnimationController لضبط الحركة والتوقيت، مما يتيح إنشاء انتقالات سلسة وجذابة.'
          },
          {
            question: 'ما هو Navigator وكيف يعمل في Flutter؟',
            answer: 'Navigator هو أداة لإدارة تنقلات الصفحات داخل التطبيق. يسمح بالتنقل بين صفحات مختلفة باستخدام push لإضافة صفحة جديدة إلى المكدس وpop لإزالة الصفحة الحالية والعودة إلى الصفحة السابقة.'
          },
          {
            question: 'كيف يتم التعامل مع الأخطاء في Flutter؟',
            answer: 'يمكن التعامل مع الأخطاء باستخدام try-catch لتحديد ومعالجة الأخطاء غير المتزامنة. كما يمكن استخدام Flutter Error Widget لتقديم واجهة مستخدم بديلة عند حدوث خطأ في التطبيق.'
          },
          {
            question: 'ما هي الـStreams وكيف تُستخدم في Flutter؟',
            answer: 'الـStreams تسمح بالتعامل مع تدفقات البيانات المستمرة، مثل البيانات الواردة من الشبكة. يمكن استخدام StreamBuilder لبناء واجهات تتفاعل مع تدفقات البيانات بشكل ديناميكي.'
          },
          {
            question: 'ما هو الفرق بين setState() و StatefulWidget؟',
            answer: 'setState() هي طريقة تُستخدم داخل StatefulWidget لتحديث حالة الواجهة (State) وإعادة بناء الواجهة بناءً على التغييرات. بينما StatefulWidget هو نوع من الـ Widgets يمكن أن يحتوي على حالة (State) تتغير خلال مدة حياة التطبيق.'
          },
          {
            question: 'كيف يمكنك تنفيذ Navigation بين الشاشات في Flutter؟',
            answer: 'يمكن استخدام Navigator للتنقل بين الشاشات. يتم استخدام Navigator.push للانتقال إلى صفحة جديدة وNavigator.pop للعودة إلى الصفحة السابقة.'
          },
          {
            question: 'ما هو الفرق بين pushReplacement و pushAndRemoveUntil؟',
            answer: 'pushReplacement يحل محل الشاشة الحالية بالشاشة الجديدة دون إمكانية العودة للشاشة السابقة. pushAndRemoveUntil يزيل جميع الشاشات في التكديس حتى يصل إلى شرط محدد، ثم يضيف الشاشة الجديدة.'
          },
          {
            question: 'كيف تعمل InheritedWidget في Flutter؟',
            answer: 'InheritedWidget هو Widget يُستخدم لمشاركة البيانات عبر شجرة Widgets بشكل فعال. عادةً ما يتم استخدامه مع إدارة الحالة للسماح للويدجتس الفرعية بالوصول إلى البيانات المشتركة دون الحاجة إلى تمرير البيانات يدويًا.'
          },
          {
            question: 'ما هي الـKeys في Flutter وما فائدتها؟',
            answer: 'Keys تُستخدم لتحديد الـWidgets بطريقة فريدة، وهي مفيدة في الحالات التي يتم فيها إعادة بناء الـUI وتحتاج للتأكد من أن الـWidgets تُعاد بناءً بشكل صحيح دون فقد البيانات أو الحالة.'
          },
          {
            question: 'ما هو GlobalKey ومتى تستخدمه؟',
            answer: 'GlobalKey يسمح بالوصول إلى حالة Widget محددة من أي مكان في التطبيق، ويُستخدم عندما تحتاج إلى التحكم في الـWidget أو الوصول إلى الحالة (State) خارج شجرة الـWidgets.'
          },
          {
            question: 'كيف يمكن التعامل مع الرسوم المتحركة (Animations) في Flutter؟',
            answer: 'Flutter يحتوي على مكتبة قوية للرسوم المتحركة. يمكنك استخدام AnimationController وTween لإنشاء رسوم متحركة. هناك أيضًا Widgets جاهزة مثل AnimatedContainer وHero للرسوم الانتقالية.'
          },
          {
            question: 'ما هو FutureBuilder وكيف يُستخدم؟',
            answer: 'FutureBuilder هو Widget يُستخدم للتعامل مع البيانات غير المتزامنة (async). يُبنى على نتيجة Future، ويسمح لك بعرض البيانات عندما تكون جاهزة أو عرض واجهة تحميل أثناء انتظار البيانات.'
          },
          {
            question: 'ما هو الفرق بين FutureBuilder و StreamBuilder؟',
            answer: 'FutureBuilder يُستخدم عند التعامل مع Future، أي نتيجة واحدة تنتظر حدوثها. StreamBuilder يُستخدم عند التعامل مع Stream، حيث يمكن الحصول على عدة أحداث أو قيم بمرور الوقت.'
          },
          {
            question: 'كيف تتعامل مع تعدد اللغات (Localization) في تطبيق Flutter؟',
            answer: 'يمكن استخدام مكتبة intl وflutter_localizations لدعم تعدد اللغات في Flutter. يتم إنشاء ملفات لغة (.arb) لكل لغة ويتم تحديد الترجمة بناءً على لغة الجهاز أو اللغة التي يختارها المستخدم.'
          },
          {
            question: 'ما هي القيود (Constraints) في Flutter؟',
            answer: 'القيود في Flutter تُحدد كيف يمكن للـWidgets أن تُحَدّد أبعادها وموقعها. يعتمد كل Widget على القيود القادمة من الـParent لتحديد حجمه وموقعه داخل الشجرة.'
          },
          {
            question: 'ما هو Bloc وكيف يعمل في Flutter؟',
            answer: 'Bloc (Business Logic Component) هو نمط إدارة حالة شائع في Flutter. يستخدم Streams للتفاعل مع الواجهة والبيانات، حيث يتم فصل منطق الأعمال عن واجهة المستخدم، مما يسهل اختبار الكود وإعادة استخدامه.'
          },
          {
            question: 'كيف يمكنك تحسين كفاءة استهلاك الذاكرة في تطبيق Flutter؟',
            answer: 'استخدام الـWidgets الثابتة const عندما لا تحتاج إلى إعادة بناء الـWidget. تحرير الموارد غير الضرورية مثل الصور أو الصوت بعد الانتهاء منها. تقليل استخدام العمليات الحسابية الثقيلة داخل Widgets مثل الـBuild.'
          },
          {
            question: 'كيف تتعامل مع الأخطاء في Flutter؟',
            answer: 'يمكن استخدام try-catch لالتقاط الأخطاء وإدارتها. كما يمكنك استخدام أدوات مثل FlutterError.onError لالتقاط الأخطاء غير المتوقعة والإبلاغ عنها.'
          },
          {
            question: 'ما هو الفرق بين Spacer و Expanded؟',
            answer: 'Spacer يُستخدم لإنشاء مساحة فارغة بين Widgets. Expanded يسمح بتوسيع Widget داخل Row أو Column لملء المساحة المتاحة.'
          },
          {
            question: 'كيف يمكنك تحميل الصور في تطبيق Flutter؟',
            answer: 'يمكن تحميل الصور باستخدام Image.asset للصور المحلية وImage.network للصور المستضافة على الإنترنت. يمكن أيضًا تحميل الصور من مصادر أخرى باستخدام مكتبات مثل cached_network_image.'
          },
          {
            question: 'ما هو ClipRRect؟ ومتى يُستخدم؟',
            answer: 'ClipRRect هو Widget يُستخدم لتطبيق تأثير القص مع زوايا مدورة على الـWidget. يتم استخدامه عندما تحتاج إلى قص صورة أو أي عنصر آخر ضمن حواف معينة.'
          },
          {
            question: 'ما هي حالات دورة حياة StatefulWidget؟',
            answer: 'أهم الحالات هي: initState(): تُستدعى عند إنشاء الـWidget لأول مرة. build(): تُبنى الـUI في كل مرة يتم استدعاء setState(). dispose(): تُستدعى عندما يتم إزالة الـWidget من الشجرة.'
          },
          {
            question: 'كيف يمكن استخدام قواعد بيانات NoSQL مثل Firebase Firestore في Flutter؟',
            answer: 'يمكن استخدام مكتبة cloud_firestore للتفاعل مع Firebase Firestore. يتم استرداد البيانات باستخدام أساليب مثل get وstream، ويتم تحديث البيانات باستخدام أساليب set, update, وdelete.'
          },
          {
            question: 'ما هي أنماط التصميم الشائعة التي يمكن استخدامها مع Flutter؟',
            answer: 'MVC (Model-View-Controller): فصل واجهة المستخدم عن البيانات والمنطق. MVVM (Model-View-ViewModel): استخدام ViewModel لربط البيانات والواجهة. Bloc: استخدام Streams لإدارة الحالة بشكل فعال.'
          },
          {
            question: 'كيف يمكن إنشاء Drawer في Flutter؟',
            answer: 'يتم استخدام Widget Drawer داخل Scaffold لإنشاء قائمة جانبية يمكن فتحها وإغلاقها. يتم وضع القائمة داخل خاصية drawer لـ Scaffold.'
          },
          {
            question: 'كيف تتعامل مع الصور الثقيلة لتحسين الأداء؟',
            answer: 'يمكن استخدام مكتبة cached_network_image لتخزين الصور مؤقتًا على الجهاز وتقليل وقت التحميل في كل مرة يتم عرض الصورة. كما يُفضل تحميل الصور بالحجم المناسب وتقليل جودتها إذا كانت لا تؤثر على تجربة المستخدم.'
          },
          {
            question: 'كيف يمكنك اختبار تطبيقات Flutter؟',
            answer: 'Flutter يدعم أنواع متعددة من الاختبارات: Unit tests: لاختبار وحدات محددة مثل الدوال أو الكلاسات. Widget tests: لاختبار واجهات المستخدم Widgets. Integration tests: لاختبار التطبيق بالكامل معًا والتأكد من عمل كل شيء بشكل متكامل.'
          },
          {
            question: 'كيف يمكن التعامل مع إشعارات الدفع (Push Notifications) في Flutter؟',
            answer: 'يمكن استخدام مكتبة firebase_messaging لإضافة إشعارات الدفع إلى تطبيق Flutter باستخدام Firebase Cloud Messaging (FCM).'
          },
          {
            question: 'كيف يمكن التعامل مع الـLifecycle للتطبيقات في Flutter؟',
            answer: 'يمكن استخدام Widgets مثل WidgetsBindingObserver لمراقبة حالة التطبيق (نشط، في الخلفية، تم إيقافه) ومعالجة الأحداث بناءً على ذلك.'
          },
          {
            question: 'كيف يمكن استخدام مكتبة Dio في Flutter؟',
            answer: 'Dio هي مكتبة لإجراء طلبات HTTP وتدعم ميزات متقدمة مثل التحميل المتعدد (multipart) وإدارة الأخطاء والمقاطعات. يمكن استخدامها كبديل لمكتبة http لتوفير واجهة أكثر مرونة.'
          },
          {
            question: 'ما هو Riverpod وكيف يختلف عن Provider؟',
            answer: 'Riverpod هو نظام لإدارة الحالة يعتمد على Provider ولكنه أكثر مرونة وأمانًا. يوفر طريقة متقدمة للتعامل مع التبعيات وإعادة البناء، مما يجعل إدارة الحالة أسهل وأكثر كفاءة.'
          },
          {
            question: 'كيف يمكن استخدام GestureDetector في Flutter؟',
            answer: 'GestureDetector هو Widget يُستخدم للكشف عن الإيماءات مثل النقر والسحب. يمكنك استخدامه لتحديد كيفية استجابة التطبيق لإيماءات المستخدم المختلفة، مما يوفر تفاعلية أكبر.'
          },
          {
            question: 'ما هي طرق التعامل مع التأخير (Delay) في Flutter؟',
            answer: 'يمكن استخدام Future.delayed لإضافة تأخير معين قبل تنفيذ كود معين. يُستخدم غالبًا في حالات مثل عرض مؤشرات التحميل أو الانتظار لعرض واجهات بعد فترة زمنية محددة.'
          },
          {
            question: 'كيف يمكنك استخدام الـMixins في Dart؟',
            answer: 'Mixins هي طريقة لإعادة استخدام الأكواد في Dart. يمكنك إنشاء مزيج من الوظائف يمكن استخدامه داخل الفئات، مما يسهل مشاركة السلوكيات بين الفئات المختلفة دون وراثة.'
          }
      ],
      ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
      nextjs:[
        {
            question: 'ما هو Next.js؟',
            answer: 'Next.js هو إطار عمل مبني على React يُستخدم لتطوير تطبيقات الويب المتكاملة. يوفر ميزات مثل التقديم من جانب الخادم (SSR) والجيل الثابت (Static Generation)، والتقديم الهجين.'
        },
        {
            question: 'ما الفرق بين التقديم من جانب الخادم (Server-Side Rendering) والجيل الثابت (Static Generation) في Next.js؟',
            answer: 'Server-Side Rendering (SSR): يتم إنشاء الصفحات في وقت التشغيل بناءً على طلب المستخدم. Static Generation: يتم إنشاء الصفحات في وقت الإنشاء (build time) وتكون ثابتة وتُقدم مباشرة من الخادم.'
        },
        {
            question: 'ما هي الطرق المختلفة لجلب البيانات في Next.js؟',
            answer: 'getStaticProps: لجلب البيانات في وقت الإنشاء (static generation). getServerSideProps: لجلب البيانات في وقت الطلب (SSR). getStaticPaths: يُستخدم لتحديد المسارات الديناميكية مع الجيل الثابت. useSWR: لجلب البيانات في جانب العميل (client-side fetching).'
        },
        {
            question: 'كيف يمكن إنشاء صفحات ديناميكية في Next.js؟',
            answer: 'باستخدام التسمية الديناميكية للملفات في مجلد pages، مثل [id].js لتمثيل صفحات تعتمد على معرّف ديناميكي. استخدام getStaticPaths مع getStaticProps لتحديد المسارات الديناميكية عند استخدام الجيل الثابت.'
        },
        {
            question: 'ما الفرق بين Link و useRouter في Next.js؟',
            answer: 'Link: يُستخدم للتنقل بين الصفحات الداخلية في التطبيق. useRouter: هو hook يُستخدم للوصول إلى بيانات التنقل والطرق الحالية، مثل الاستعلامات أو الانتقال البرمجي.'
        },
        {
            question: 'كيف يمكن تحسين أداء تطبيق Next.js؟',
            answer: 'استخدام Static Generation كلما أمكن. استخدام Image Optimization المدمجة في Next.js. تفعيل Lazy Loading للصور والمكونات الثقيلة. استخدام next/script لتحميل الأكواد الخارجية بطريقة محسنة.'
        },
        {
            question: 'ما هو API Routes في Next.js؟',
            answer: 'API Routes هي ميزة في Next.js تُتيح لك إنشاء واجهات برمجة التطبيقات (APIs) بسهولة داخل التطبيق. يمكنك وضع ملفات JS في مجلد pages/api/ لإنشاء نقاط نهاية API.'
        },
        {
            question: 'كيف يمكن التعامل مع التصريف الهجين (hybrid rendering) في Next.js؟',
            answer: 'يمكنك استخدام مزيج من Static Generation و Server-Side Rendering في نفس التطبيق. بعض الصفحات يمكن أن تكون ثابتة بينما تكون أخرى تقدم من الخادم بناءً على متطلبات المشروع.'
        },
        {
            question: 'ما هي Middleware في Next.js؟',
            answer: 'Middleware هي دوال تُستخدم لتنفيذ منطق قبل تقديم الصفحة، مثل إجراء عمليات المصادقة أو إعادة التوجيه.'
        },
        {
            question: 'كيف يمكن استخدام الصور في Next.js؟',
            answer: 'يمكن استخدام مكون <Image> المدمج في Next.js، والذي يوفر تحسينات تلقائية للصور مثل التحميل الكسول (lazy loading) وضبط الحجم بناءً على الأجهزة.'
        },
        {
            question: 'ما هو getInitialProps في Next.js؟',
            answer: 'getInitialProps هو دالة تُستخدم لجلب البيانات في المكونات، ويمكن استخدامها مع الصفحات التي تحتاج إلى بيانات قبل التقديم. ومع ذلك، يُفضل استخدام getStaticProps أو getServerSideProps في التطبيقات الجديدة.'
        },
        {
            question: 'كيف يمكن التعامل مع الأخطاء في Next.js؟',
            answer: 'يمكن استخدام مكون Error Boundaries لالتقاط الأخطاء في مكونات React. كما يمكن تخصيص صفحة 404 وصفحة 500 لتقديم واجهة مستخدم مخصصة عند حدوث أخطاء.'
        },
        {
            question: 'ما هي المزايا الرئيسية لاستخدام Next.js؟',
            answer: 'تقديم من جانب الخادم (SSR) وتحسين أداء التطبيقات. دعم الجيل الثابت (Static Generation) وAPI Routes. تحسين SEO وسرعة التحميل.'
        },
        {
            question: 'كيف يمكنك تنفيذ تحسين SEO في Next.js؟',
            answer: 'يمكن استخدام Head component من next/head لتحديد البيانات الوصفية (meta tags) لكل صفحة، مثل العناوين، والأوصاف، والروابط.'
        },
        {
            question: 'ما هو Internationalization (i18n) في Next.js؟',
            answer: 'Internationalization (i18n) هي ميزة في Next.js تسمح بتطوير تطبيقات متعددة اللغات. يمكن تكوينها في next.config.js لتحديد اللغات المدعومة ومسارات الصفحات المختلفة.'
        },
        {
            question: 'كيف يمكن استخدام Custom Server في Next.js؟',
            answer: 'يمكن استخدام Custom Server لتخصيص خادم Node.js الذي يُستخدم مع تطبيق Next.js. يُمكن إعداد خادم باستخدام Express أو أي إطار عمل آخر، وتوجيه الطلبات إلى تطبيق Next.js باستخدام next().'
        },
        {
            question: 'كيف يمكنك نشر تطبيق Next.js؟',
            answer: 'يمكن نشر تطبيق Next.js على منصات مثل Vercel وNetlify، حيث يمكن ربط المستودع وإجراء عملية النشر بسهولة.'
        },
        {
            question: 'ما هو React Fast Refresh في Next.js؟',
            answer: 'React Fast Refresh هو ميزة لتحميل التعديلات بشكل سريع أثناء تطوير التطبيق، مما يعزز تجربة التطوير دون فقدان الحالة في المكونات.'
        }
      ],
      ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
      matrialUI:[
        {
            question: 'ما هو Material UI؟',
            answer: 'Material UI هو مكتبة مكونات UI مبنية على React والتي تُستخدم لبناء واجهات مستخدم حديثة ومتجاوبة باستخدام تصميم Google Material Design.'
        },
        {
            question: 'كيف يمكن تطبيق الأنماط المخصصة (custom styles) في Material UI؟',
            answer: 'يمكنك استخدام makeStyles أو styled من @mui/styles لتطبيق أنماط مخصصة على المكونات. يمكنك أيضًا تعديل الأنماط باستخدام الـ sx prop الذي يُستخدم لتطبيق الأنماط المخصصة بشكل مباشر على المكونات.'
        },
        {
            question: 'ما هو Theme في Material UI؟',
            answer: 'Theme هو كائن يحتوي على أنماط وتصميمات مخصصة للتطبيق. يمكنك تخصيص الألوان، الأحجام، الخطوط، وغيرها من خلال ملف theme وتطبيقه عبر ThemeProvider.'
        },
        {
            question: 'كيف يمكنك تخصيص مكونات Material UI؟',
            answer: 'يمكنك تخصيص المكونات بطريقتين: تعديل الـ props لكل مكون لتغيير سلوكه الافتراضي. استخدام sx prop لتطبيق الأنماط المخصصة مباشرة. استخدام makeStyles لإنشاء أنماط CSS مخصصة.'
        },
        {
            question: 'ما هو Grid في Material UI؟',
            answer: 'Grid هو مكون لتخطيط العناصر في شبكة متجاوبة، حيث يمكنك تقسيم الصفحة إلى أعمدة وصفوف وتحديد النسب لكل عمود باستخدام خصائص مثل xs, sm, md, lg, و xl.'
        },
        {
            question: 'كيف يمكنك تحسين الأداء عند استخدام Material UI؟',
            answer: 'استخدام Tree Shaking لتقليل حجم الحزمة النهائية. استخدام Lazy Loading لتحميل المكونات عند الحاجة فقط. تجنب إعادة التصيير غير الضرورية عبر استخدام React.memo أو PureComponent.'
        },
        {
            question: 'كيف يمكن إنشاء شريط تنقل (Navbar) باستخدام Material UI؟',
            answer: 'يمكنك استخدام مكونات AppBar و Toolbar مع مكونات مثل Typography و Button و IconButton لإنشاء شريط تنقل قابل للتخصيص.'
        },
        {
            question: 'ما هو Dialog في Material UI؟',
            answer: 'Dialog هو مكون يُستخدم لإنشاء نوافذ منبثقة (modals) لتقديم معلومات أو طلبات من المستخدم. يمكنك استخدام Dialog لإظهار محتوى تفاعلي مع خيارات للمستخدم.'
        },
        {
            question: 'كيف يمكنك استخدام Icons في Material UI؟',
            answer: 'يمكن استخدام مكونات الأيقونات من مكتبة Material Icons عبر استيراد الأيقونات مباشرة، مثل <Icon> أو <SvgIcon>، لتضمين الأيقونات في الواجهة بسهولة.'
        },
        {
            question: 'ما هو Snackbar في Material UI؟',
            answer: 'Snackbar هو مكون يُستخدم لإظهار رسائل قصيرة للمستخدم، مثل إشعارات النجاح أو الخطأ. يظهر لفترة قصيرة في الجزء السفلي من الشاشة.'
        },
        {
            question: 'كيف يمكنك إضافة تأثيرات الانتقال (Transitions) في Material UI؟',
            answer: 'يمكن استخدام مكون Transition أو Collapse لإضافة تأثيرات انتقالية سلسة بين حالات المكونات المختلفة مثل الفتح والإغلاق.'
        },
        {
            question: 'ما هي خصائص الـ sx في Material UI؟',
            answer: 'الـ sx prop هو وسيلة مرنة لتطبيق الأنماط بشكل مباشر على المكونات، مما يسمح لك بتخصيص الأنماط بسهولة دون الحاجة إلى إنشاء أنماط خارجية.'
        },
        {
            question: 'كيف يمكنك استخدام Form Control في Material UI؟',
            answer: 'يمكن استخدام مكونات FormControl وInputLabel وSelect وTextField لبناء نماذج إدخال تفاعلية ومخصصة، مما يُسهل إدارة البيانات المدخلة من قبل المستخدم.'
        },
        {
            question: 'كيف يمكنك إدارة الأنماط العالمية في Material UI؟',
            answer: 'يمكن استخدام CssBaseline لتطبيق أنماط CSS الأساسية على مستوى التطبيق بأكمله، مما يوفر قاعدة ثابتة للمظهر والتصميم.'
        },
        {
            question: 'ما هو Box في Material UI؟',
            answer: 'Box هو مكون حاوية مرن يُستخدم لتخطيط العناصر وتطبيق الأنماط بسهولة. يمكنك استخدامه كحاوية بسيطة لتطبيق أنماط CSS المخصصة بشكل مباشر.'
        }
      ],
      ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
      nodejs:[
        {
            "question": "ما هو Node.js؟",
            "answer": "Node.js هو بيئة تشغيل JavaScript مبنية على محرك V8 الخاص بـ Google Chrome. يسمح بتشغيل JavaScript على الخادم."
        },
        {
            "question": "ما هي مميزات Node.js؟",
            "answer": "مميزات Node.js تشمل الأداء العالي بفضل محرك V8، الدعم غير المتزامن، القدرة على التعامل مع عدد كبير من الاتصالات المتزامنة، وسهولة الاستخدام مع JavaScript."
        },
        {
            "question": "ما هو npm؟",
            "answer": "npm هو مدير حزم Node.js، يُستخدم لتنزيل وتثبيت الحزم والمكتبات اللازمة لتطبيقات Node.js."
        },
        {
            "question": "ما الفرق بين `require` و `import` في Node.js؟",
            "answer": "`require` هو أسلوب التحميل التقليدي في Node.js، بينما `import` هو جزء من ES6 ويستخدم مع النمط الحديث في JavaScript."
        },
        {
            "question": "كيف يمكنك إنشاء خادم بسيط باستخدام Node.js؟",
            "answer": "يمكنك استخدام وحدة `http` لإنشاء خادم بسيط كالتالي: \nconst http = require('http'); \nconst server = http.createServer((req, res) => { res.statusCode = 200; \nres.setHeader('Content-Type', 'text/plain'); res.end('Hello World');\n }); \nserver.listen(3000, '127.0.0.1', () => { console.log('Server running at http://127.0.0.1:3000/'); \n});"
        },
        {
            "question": "ما هو مفهوم الـ middleware في Express.js؟",
            "answer": "الـ middleware هو دالة في Express.js يتم تنفيذها في دورة حياة الطلب. يمكن أن تُستخدم لمعالجة الطلبات، إضافة وظائف، أو التعامل مع الأخطاء."
        },
        {
            "question": "كيف تتعامل مع الأخطاء في Node.js؟",
            "answer": "يمكن التعامل مع الأخطاء باستخدام الكتل try-catch أو باستخدام الـ middleware الخاص بالأخطاء في Express.js."
        },
        {
            "question": "ما هي الـ Promises وكيف تستخدمها؟",
            "answer": "الـ Promises هي كائنات تمثل نتيجة عملية غير متزامنة. يمكن استخدامها لتحسين إدارة تدفق التعليمات البرمجية وعدم تداخل الـ callbacks."
        },
        {
            "question": "ما الفرق بين `async/await` و Promises؟",
            "answer": "`async/await` هي طريقة مبسطة لكتابة الكود غير المتزامن باستخدام الـ Promises. تجعل الكود يبدو وكأنه متزامن."
        },
        {
            "question": "ما هي الـ Event Loop في Node.js؟",
            "answer": "الـ Event Loop هو آلية تتعامل مع العمليات غير المتزامنة، مما يسمح لـ Node.js بالتعامل مع العديد من الاتصالات دون الحاجة إلى إنشاء خيوط جديدة لكل طلب."
        },
        {
            "question": "ما هو الـ Cluster Module في Node.js؟",
            "answer": "الـ Cluster Module يسمح بتشغيل عدة نسخ من تطبيق Node.js على أنوية المعالج المتعددة لزيادة الأداء."
        },
        {
            "question": "كيف تقوم بإنشاء RESTful API باستخدام Express.js؟",
            "answer": "يمكنك استخدام `express.Router()` لتعريف مسارات GET و POST و PUT و DELETE، ثم إضافة الوظائف المناسبة لكل منها."
        },
        {
            "question": "ما هو الـ CORS وكيفية التعامل معه في Node.js؟",
            "answer": "الـ CORS (Cross-Origin Resource Sharing) هو سياسة أمان تمنع الموارد من أن تُستخدم من مصادر مختلفة. يمكن التعامل معه باستخدام مكتبة `cors` في Express.js."
        },
        {
            "question": "ما هي فوائد استخدام TypeScript مع Node.js؟",
            "answer": "TypeScript يوفر نظام نوع ثابت، مما يساعد على تقليل الأخطاء أثناء وقت التشغيل، وتحسين قابلية الصيانة، ويوفر ميزات إضافية مثل الواجهات."
        },
        {
            "question": "كيف يمكنك إدارة البيئة في تطبيقات Node.js؟",
            "answer": "يمكنك استخدام مكتبة `dotenv` لتحميل المتغيرات البيئية من ملف `.env` إلى `process.env`."
        },
        {
            "question": "ما هو مفهوم الـ callback hell؟",
            "answer": "الـ callback hell هو تعقيد يحدث عندما يتم استخدام العديد من الدوال غير المتزامنة، مما يؤدي إلى تداخل كبير في التعليمات البرمجية. يمكن تجنب ذلك باستخدام الـ Promises أو `async/await`."
        },
        {
            "question": "كيف يمكنك تحسين أداء تطبيق Node.js؟",
            "answer": "يمكن تحسين الأداء عن طريق استخدام الـ caching، وتقليل عدد الـ requests، وتحسين الاستعلامات إلى قاعدة البيانات، واستخدام الـ clustering."
        },
        {
            "question": "ما هو مفهوم الـ Stream في Node.js؟",
            "answer": "الـ Stream هو كائن يسمح بقراءة البيانات أو كتابتها بشكل متتابع. تُستخدم Streams للتعامل مع البيانات الكبيرة بكفاءة."
        },
        {
            "question": "كيف يمكن تثبيت حزمة باستخدام npm؟",
            "answer": "يمكنك تثبيت حزمة باستخدام الأمر: npm install <package-name>"
        },
        {
            "question": "ما هي المكتبات الشائعة المستخدمة مع Node.js؟",
            "answer": "بعض المكتبات الشائعة تشمل Express.js، Mongoose، Socket.io، وAxios."
        },
        {
            "question": "ما هي مفهوم الـ session في Node.js؟",
            "answer": "الـ session هو طريقة لتخزين المعلومات على الخادم لتمييز المستخدمين بين الطلبات المختلفة."
        },
        {
            "question": "كيف يمكنك قراءة ملف باستخدام Node.js؟",
            "answer": "يمكنك استخدام وحدة `fs` لقراءة الملفات كالتالي: const fs = require('fs'); fs.readFile('file.txt', 'utf8', (err, data) => { if (err) throw err; console.log(data); });"
        },
        {
            "question": "ما هو مفهوم الـ template engines في Node.js؟",
            "answer": "الـ template engines تُستخدم لتوليد HTML ديناميكي. مثال على ذلك: EJS، Pug، Handlebars."
        },
        {
            "question": "كيف يمكنك استخدام WebSocket في Node.js؟",
            "answer": "يمكنك استخدام مكتبة `ws` لإنشاء اتصال WebSocket. يتيح لك ذلك تبادل البيانات بشكل ثنائي الاتجاه بين الخادم والعميل."
        },
        {
            "question": "ما هو الـ NoSQL؟ كيف يتعامل Node.js مع قواعد البيانات؟",
            "answer": "NoSQL هو نوع من قواعد البيانات غير العلائقية. Node.js يمكنه الاتصال بقواعد البيانات مثل MongoDB باستخدام مكتبة Mongoose."
        },
        {
            "question": "ما هو مفهوم الـ microservices؟",
            "answer": "الـ microservices هي أسلوب معماري يُقسم التطبيق إلى خدمات صغيرة، مما يسهل التطوير والصيانة."
        },
        {
            "question": "كيف يمكنك التعامل مع ملفات JSON في Node.js؟",
            "answer": "يمكنك استخدام `fs` لقراءة ملفات JSON وتحويلها إلى كائن JavaScript باستخدام `JSON.parse()`."
        },
        {
            "question": "ما هي الممارسات الجيدة في كتابة كود Node.js؟",
            "answer": "تشمل كتابة كود نظيف، استخدام الـ Promises، تنظيم الكود بشكل جيد، واستخدام أدوات مثل ESLint للتحقق من الجودة."
        },
        {
            "question": "كيف تتعامل مع التوثيق في Node.js؟",
            "answer": "يمكنك استخدام مكتبات مثل `jsonwebtoken` للتوثيق، وOpenAPI أو Swagger لتوثيق واجهات API."
        },
        {
            "question": "ما هي بعض من الأخطاء الشائعة التي يجب تجنبها في Node.js؟",
            "answer": "تشمل تجنب استخدام الـ callback hell، عدم معالجة الأخطاء بشكل مناسب، عدم استخدام الـ Promises، وعدم استخدام الـ environment variables بشكل آمن."
        }
    ],
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    dotnet:[
    //   {
    //       "question": "ما هو .NET؟",
    //       "answer": ".NET هو إطار عمل لتطوير البرمجيات يُستخدم لبناء تطبيقات تعمل على أنظمة تشغيل متعددة، بما في ذلك Windows وLinux وmacOS."
    //   },
    //   {
    //       "question": "ما هي مكونات .NET الأساسية؟",
    //       "answer": "مكونات .NET الأساسية تشمل CLR (Common Language Runtime)، BCL (Base Class Library)، ASP.NET، وADO.NET."
    //   },
    //   {
    //       "question": "ما هو CLR؟",
    //       "answer": "CLR هو بيئة التنفيذ في .NET التي تدير تنفيذ التعليمات البرمجية، وتوفر ميزات مثل إدارة الذاكرة والأمان."
    //   },
    //   {
    //       "question": "ما الفرق بين .NET Framework و .NET Core؟",
    //       "answer": ".NET Framework هو إطار عمل قديم يدعم فقط Windows، بينما .NET Core هو إطار عمل حديث مفتوح المصدر يدعم أنظمة تشغيل متعددة."
    //   },
    //   {
    //       "question": "ما هو ASP.NET؟",
    //       "answer": "ASP.NET هو إطار عمل لتطوير تطبيقات الويب يُستخدم لبناء مواقع ويب ديناميكية وتطبيقات ويب."
    //   },
    //   {
    //       "question": "ما هو ADO.NET؟",
    //       "answer": "ADO.NET هو مجموعة من الفئات التي تُستخدم للوصول إلى البيانات وإدارتها في تطبيقات .NET، بما في ذلك الاتصال بقواعد البيانات."
    //   },
    //   {
    //       "question": "ما هي MVC في ASP.NET؟",
    //       "answer": "MVC (Model-View-Controller) هو نمط تصميم يُستخدم في ASP.NET لفصل منطق التطبيق عن واجهة المستخدم."
    //   },
    //   {
    //       "question": "ما هو NuGet؟",
    //       "answer": "NuGet هو مدير حزم .NET، يُستخدم لتثبيت وإدارة الحزم في مشاريع .NET."
    //   },
    //   {
    //       "question": "ما هي الكلاسات الافتراضية في .NET؟",
    //       "answer": "الكلاسات الافتراضية في .NET هي الكلاسات التي يمكن استخدامها كقاعدة لإنشاء كلاس آخر باستخدام الوراثة."
    //   },
    //   {
    //       "question": "كيف تتعامل مع الأخطاء في .NET؟",
    //       "answer": "يمكن التعامل مع الأخطاء في .NET باستخدام الكتل try-catch-finally."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ Delegates؟",
    //       "answer": "الـ Delegates هو نوع آمن من المؤشرات يُستخدم للإشارة إلى طريقة، مما يسمح بتمرير الطرق كمعاملات."
    //   },
    //   {
    //       "question": "ما هو LINQ؟",
    //       "answer": "LINQ (Language Integrated Query) هو ميزة في .NET تسمح بكتابة استعلامات بشكل متكامل ضمن التعليمات البرمجية."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ Entity Framework؟",
    //       "answer": "Entity Framework هو ORM (Object-Relational Mapping) يُستخدم لتسهيل التعامل مع قواعد البيانات."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ Attributes في .NET؟",
    //       "answer": "Attributes هي وسوم تُستخدم لإضافة معلومات وصفية إلى الكلاسات والخصائص والطرق."
    //   },
    //   {
    //       "question": "كيف يمكنك إنشاء واجهة مستخدم باستخدام WPF؟",
    //       "answer": "يمكنك استخدام WPF (Windows Presentation Foundation) لإنشاء واجهة مستخدم غنية تعتمد على XAML."
    //   },
    //   {
    //       "question": "ما هي خدمة REST في .NET؟",
    //       "answer": "REST (Representational State Transfer) هي نمط معماري يُستخدم لبناء خدمات ويب، ويمكن تنفيذها في .NET باستخدام ASP.NET Web API."
    //   },
    //   {
    //       "question": "ما هي المزايا التي يوفرها .NET Core؟",
    //       "answer": ".NET Core يوفر دعم الأنظمة المتعددة، الأداء العالي، قابلية التوسع، وإمكانية التشغيل عبر المنصات."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ Asynchronous Programming في .NET؟",
    //       "answer": "البرمجة غير المتزامنة في .NET تسمح بتنفيذ العمليات بشكل متزامن، مما يُحسن أداء التطبيق ويقلل من وقت الانتظار."
    //   },
    //   {
    //       "question": "كيف تتعامل مع البيانات غير المتزامنة في .NET؟",
    //       "answer": "يمكن استخدام الكلمات المفتاحية async وawait للتعامل مع العمليات غير المتزامنة."
    //   },
    //   {
    //       "question": "ما هي استخدامات الـ Middleware في ASP.NET Core؟",
    //       "answer": "الـ Middleware تُستخدم لمعالجة الطلبات والاستجابة، مثل إدارة الأمان والتوثيق وتسجيل الدخول."
    //   },
    //   {
    //       "question": "كيف يمكنك تنفيذ التحقق من صحة البيانات في ASP.NET؟",
    //       "answer": "يمكن تنفيذ التحقق من صحة البيانات باستخدام الـ Data Annotations أو باستخدام نموذج التحقق المخصص."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ Dependency Injection؟",
    //       "answer": "Dependency Injection هو نمط تصميم يُستخدم لزيادة قابلية اختبار التطبيقات عن طريق فصل إنشاء الكائنات عن استخدامها."
    //   },
    //   {
    //       "question": "كيف يمكن التعامل مع الجلسات في ASP.NET؟",
    //       "answer": "يمكن التعامل مع الجلسات في ASP.NET باستخدام كائن HttpContext.Session."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ ViewModels؟",
    //       "answer": "ViewModels هي كائنات تُستخدم لنقل البيانات بين العرض والنموذج في تطبيقات ASP.NET MVC."
    //   },
    //   {
    //       "question": "كيف يمكنك استخدام الحماية في تطبيقات ASP.NET؟",
    //       "answer": "يمكن استخدام ميزة التوثيق (Authentication) والتفويض (Authorization) لحماية تطبيقات ASP.NET."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ Web API؟",
    //       "answer": "Web API هي واجهة برمجة تطبيقات تُستخدم لبناء خدمات ويب تتيح التفاعل مع البيانات عبر HTTP."
    //   },
    //   {
    //       "question": "كيف يمكنك تحسين أداء تطبيقات .NET؟",
    //       "answer": "يمكن تحسين الأداء من خلال تحسين استعلامات قاعدة البيانات، استخدام الـ caching، وتحسين استهلاك الذاكرة."
    //   },
    //   {
    //       "question": "ما هو مفهوم الـ SignalR؟",
    //       "answer": "SignalR هو مكتبة تُستخدم لإضافة ميزات الوقت الحقيقي لتطبيقات الويب، مما يسمح بالتحديثات التلقائية."
    //   },
    //   {
    //       "question": "كيف يمكنك التعامل مع قواعد البيانات في .NET؟",
    //       "answer": "يمكنك استخدام ADO.NET أو Entity Framework للتعامل مع قواعد البيانات في تطبيقات .NET."
    //   },
    //   {
    //       "question": "ما هي بعض الأدوات المفيدة لتطوير .NET؟",
    //       "answer": "بعض الأدوات تشمل Visual Studio، ReSharper، وPostman لاختبار خدمات الويب."
    //   },
    //   {
    //       "question": "كيف يمكنك تنفيذ الاختبارات في .NET؟",
    //       "answer": "يمكنك استخدام إطار عمل مثل xUnit أو NUnit لتنفيذ الاختبارات في تطبيقات .NET."
    //   }
    {
        question: 'ما هو .NET Framework؟',
        answer: 'تم تطوير .NET Framework بواسطة Microsoft. يوفر التقنيات والأدوات اللازمة لبناء تطبيقات الشبكة وكذلك تطبيقات وخدمات الويب الموزعة.'
      },
      
      {
        question: 'ما الذي يوفره .NET Framework؟',
        answer: 'يقدم .NET Framework بيئة وقت ترجمة وتشغيل تدعم أي لغة تتوافق مع مواصفات اللغة العامة (Common Language Specification - CLS).'
      },
      
      {
        question: 'ما هي المكونات الرئيسية لبرنامج .NET Framework؟',
        answer: 'المكونات الرئيسية لـ .NET Framework تشمل:\n- وقت تشغيل اللغة العامة (Common Language Runtime - CLR).\n- مكتبة فئات إطار العمل (Framework Class Library - FCL).\n- مجالات التطبيق (Application Domains).\n- مضيف وقت التشغيل (Runtime Host).\n- التشغيل البيني بين اللغات (Cross-Language Interoperability).\n- التنفيذ جنبًا إلى جنب (Side-by-Side Execution).\n- وقت تشغيل اللغة الديناميكي (Dynamic Language Runtime - DLR).\n- نظام النوع المشترك (Common Type System - CTS).\n- البيانات الوصفية والمكونات ذاتية الوصف (Metadata and Self-Describing Components).\n- الأمان في .NET (Security in .NET).\n- بنية عرض النموذج (Model-View-Presenter - MVP Architecture).'
      },
      
      {
        question: 'ما هي الخصائص الرئيسية لـ .NET؟',
        answer: 'الخصائص الرئيسية لـ .NET تشمل:\n- يتم تجميع البرنامج إلى لغة وسيطة تُعرف بـ Microsoft Intermediate Language - MSIL (لغة Microsoft الوسيطة).\n- MSIL لا يحتوي على أي استدعاءات API خاصة بمنصة معينة.\n- يتحقق المترجم من بناء الجملة والدلالات الأساسية فقط.\n- يتم ربط المكتبات المستخدمة في البرنامج قبل إنشاء MSIL بشكل غير مترجم.\n- يستدعي البرنامج واجهات برمجة التطبيقات (API) الخاصة بنظام التشغيل عبر CLR الذي يعمل كوسيط.\n- تقوم CLR بإدارة الذاكرة وجمع البيانات المهملة تلقائيًا.'
      },
      
      {
        question: 'ما هي اللغات التي يدعمها .NET؟',
        answer: 'يدعم .NET عدة لغات برمجة منها:\n- VB.NET\n- C#\n- COBOL\n- PERL.'
      },
      
      {
        question: 'ما هو حجم نوع البيانات int في .NET؟',
        answer: 'نوع البيانات int في .NET حجمه 32 بت.'
      },
      
      {
        question: 'ما هي مساحات الأسماء (Namespaces) في .NET؟',
        answer: 'مساحات الأسماء أو Namespaces في .NET هي وسيلة لتنظيم مكتبة الفئات داخل .NET Framework بشكل منطقي حسب سهولة الاستخدام والوظيفة.'
      },
      
      {
        question: 'ما هو MSIL في .NET؟',
        answer: 'MSIL هي اختصار لـ Microsoft Intermediate Language (لغة Microsoft الوسيطة).\nأثناء وقت الترجمة، يتم تحويل التعليمات البرمجية المصدرية إلى MSIL بواسطة المترجم.\nتُعد MSIL مجموعة من التعليمات المستقلة عن المعالج (CPU) والتي يمكن تحويلها بكفاءة إلى التعليمات الأصلية.'
      },
      
      {
        question: 'ما هي وظائف .NET Assembly؟',
        answer: 'Assembly أو التجميع هو الوحدة الأساسية للنشر في تطبيقات .NET Framework ويكون تنسيقه إما .exe أو .dll. وتؤدي التجميعات الوظائف التالية:\n- تحتوي على كود IL الذي يتم تنفيذه بواسطة CLR.\n- تشكل حدودًا أمنية.\n- تضمن سلامة نطاق الاسم للأنواع خلال وقت التشغيل.\n- تحمل معلومات الإصدار.\n- تتيح التنفيذ جنبًا إلى جنب لإصدارات مختلفة من نفس التجميع.\n- يتم طلب ومنح الأذونات ضمنها.'
      },
      
      {
        question: 'ما هو .NET Assembly Manifest؟',
        answer: 'Assembly Manifest هو ملف يحتوي على Metadata أو بيانات وصفية حول Assemblies في .NET.\nيصف كيفية ارتباط المكونات داخل التجميع ببعضها البعض ويحدد العلاقة والتبعيات، معلومات النطاق، ومعلومات الإصدار، وغيرها.'
      },
      {
        question: 'ما هو MSIL في .NET؟',
        answer: 'تتضمن لغة Microsoft Intermediate Language - MSIL تعليمات لتخزين وتحميل وتهيئة واستدعاء الأساليب على الكائنات، بالإضافة إلى تعليمات للعمليات المنطقية والحسابية، والوصول المباشر إلى الذاكرة، وتدفق التحكم، ومعالجة الاستثناءات، وعمليات أخرى.'
      },
      
      {
        question: 'ما هو تنسيق الملف PE (Portable Executable)؟',
        answer: 'تنسيق الملف القابل للتنفيذ المحمول (PE) هو تنسيق ملف للملفات التنفيذية، وكود الكائن، وملفات DLL المستخدمة في إصدارات 64 بت و32 بت من أنظمة تشغيل Windows.'
      },
      
      {
        question: 'ما الفرق بين التجميع (Assembly) ومساحة الاسم (Namespace)؟',
        answer: '- يمكن أن تمتد مساحة الاسم إلى تجميعات متعددة.\n- يمكن لمساحة الاسم تجميع الفئات بشكل منطقي.\n- التجميع عبارة عن مجموعة مادية من الوحدات المنطقية.'
      },
      
      {
        question: 'ما هي مساحة الاسم التي يوفرها .NET لإدارة البيانات؟',
        answer: 'تتضمن مساحات الأسماء التي يوفرها .NET لإدارة البيانات ما يلي:\n- System.Data\n- System.Data.SqlClient\n- System.Xml.'
      },
      
      {
        question: 'ما هو GAC في .NET؟',
        answer: 'يشير GAC إلى ذاكرة التخزين المؤقت للتجميع العمومي (Global Assembly Cache). إنها منطقة في الذاكرة مخصصة لتخزين التجميعات المستخدمة من قِبل جميع تطبيقات .NET التي تعمل على جهاز معين.'
      },
      
      {
        question: 'ما هو STA في .NET؟',
        answer: 'يشير STA أو نموذج الشقة المفردة (Single Thread Apartment) إلى نموذج قائم على الرسائل للتعامل مع كائنات متعددة تعمل بشكل متزامن، حيث يعيش كل خيط في شقة خاصة به.'
      },
      
      {
        question: 'ما هو معدّل الوصول (Access Modifier) في .NET؟',
        answer: 'يوفر معدّل الوصول في .NET إمكانية التحكم في الوصول إلى فئة، أو وظيفة، أو متغير ضمن نطاق معين.'
      },
      
      {
        question: 'ما هي أنواع معدّلات الوصول (Access Modifiers) في .NET؟',
        answer: 'معدّلات الوصول في .NET هي خمسة أنواع:\n- عام (Public)\n- خاص (Private)\n- محمي (Protected)\n- داخلي (Internal)\n- داخلي محمي (Protected Internal).'
      },
      
      {
        question: 'ما هو نوع الكود الأمني (Security Code) المتوفر في .NET؟',
        answer: 'أنواع الأمان المتوفرة في .NET هي:\n- الأمان القائم على الدور (Role-Based Security): والذي يسمح بالتحكم بالوصول بناءً على أدوار المستخدمين.\n- أمان الوصول إلى الكود (Code Access Security - CAS): والذي يحمي موارد النظام من الاستدعاءات غير المصرح بها.'
      },
      
      {
        question: 'كيف يمكنك تنفيذ النمط المفرد (Singleton Pattern) في .NET؟',
        answer: 'لتطبيق النمط المفرد في .NET، اتبع الخطوات التالية:\n- إنشاء فئة تحتوي على أعضاء ثابتين.\n- تحديد منشئ خاص.\n- للوصول إلى الكائن المفرد، استخدم طريقة ثابتة.'
      },
      
      {
        question: 'كيف يتم التعامل مع الاستثناء (Exception Handling) في .NET؟',
        answer: 'في .NET، عند حدوث استثناء، يقوم إطار عمل .NET بإنشاء كائن من النوع "استثناء" (Exception) و"رميه". يحتوي كائن الاستثناء على جميع المعلومات حول الخطأ. إذا تم تغليف الكود داخل كتلة try-catch، فسيتم استقبال كائن الاستثناء داخل كتلة catch عند حدوث الاستثناء.'
      },
      
      {
        question: 'كيف يمكنك إنشاء واستخدام مجموعة (Array) في .NET؟',
        answer: 'في .NET، يمكنك إنشاء مصفوفة (Array) بالخطوات التالية:\n- إعلان مرجع إلى مصفوفة.\n- إنشاء مصفوفة من عشرة عناصر من نوع Int32.\n- إنشاء مصفوفة ثنائية الأبعاد.\n- إنشاء مصفوفة متعددة الأبعاد.'
      },

{
  question: 'ما هو نوع البيانات المعرفة من قبل المستخدم؟',
  answer: 'User-Defined Data Type هو نوع بيانات مسمى تم إنشاؤه بواسطة المستخدم. ويمكن تصنيفه إلى:\n- Enumerated Type\n- Reference Type\n- Structured Type'
},
{
  question: 'قم بإدراج عدد من مساحة اسم مكتبة الفئة الأساسية .NET؟',
  answer: '.NET Base Class Library Namespaces تتضمن:\n- Activities\n- Collections\n- Configuration\n- Enterprise Services\n- Management\n- Runtime'
},
{
  question: 'اذكر أنواع المصفوفات متعددة الأبعاد المستخدمة في .NET؟',
  answer: 'أنواع المصفوفات متعددة الأبعاد في .NET تشمل:\n\n- Jagged Arrays: مصفوفات تحتوي على صفيف فرعي كمصفوفات مستقلة بأطوال مختلفة، تستخدم مجموعة منفصلة من square brackets []\n\n- Rectangular Arrays: مصفوفات تحتوي على جميع المصفوفات الفرعية بنفس الطول، تستخدم مجموعة واحدة من square brackets []'
},
{
  question: 'ما هو حدث Bubbling في .NET؟',
  answer: 'Event Bubbling في .NET هو عملية تمرير عنصر التحكم من Child إلى Parent. يمكن أن تحتوي عناصر التحكم مثل DataList و DataGrid و Repeater على عناصر تحكم فرعية مثل ListBox'
},
{
  question: 'ما هي نوافذ التصحيح المتاحة؟',
  answer: 'Debug Windows المتاحة تشمل:\n- Breakpoints\n- Output\n- Immediate'
},
{
  question: 'ما هو Microsoft Silverlight؟',
  answer: 'Microsoft Silverlight هو framework مفتوح المصدر لإنشاء ونشر Rich Internet Applications وتجارب الوسائط على الويب.\n\nيتكون من ثلاثة مكونات رئيسية:\n- Presentation Framework\n- .NET Framework for Silverlight\n- Updater and Installer'
},

{
  question: 'مما يتكون Silverlight؟',
  answer: 'يتكون Silverlight من أربعة مكونات رئيسية:\n\n- Silverlight Plugin\n- Silverlight Host (Web Page)\n- Silverlight Application File (.XAP)\n- XAML Interface Language'
},
{
  question: 'ما هو ملف .XAP؟',
  answer: '.XAP file هو ملف مضغوط لتطبيق Silverlight. يحتوي على:\n- AppManifest.xaml\n- Silverlight Project Output Assembly (.dll)\n- Resources\n\nMIME type للملف هو: application/x-silverlight'
},
{
  question: 'ما هو الفرق بين WPF و Silverlight؟',
  answer: '- Silverlight هو subset من Windows Presentation Foundation (WPF)\n- Silverlight ينافس Adobe Flash ومصمم لتطوير Rich Internet Applications\n- WPF هي تقنية Microsoft لتطوير Enhanced Graphics Applications لمنصة Desktop\n- يمكن استضافة تطبيق Browser-based على متصفحات الويب مع ميزات Rich Graphics'
},
{
  question: 'ما هو RIA؟',
  answer: 'RIA (Rich Internet Applications) هي تطبيقات ويب ذات ميزات متقدمة تتضمن:\n- Built-in AJAX Support\n- Layouts\n- Animations\n- Audio & Video Components\n\nSilverlight هو مثال على RIA'
},
{
  question: 'ما هي عناصر التحكم المختلفة في Layout المتاحة في Silverlight؟',
  answer: 'عناصر التحكم في Layout تشمل:\n\n- StackPanel: يتم ترتيب العناصر الفرعية بشكل عمودي أو أفقي\n- Grid: يتم ترتيب العناصر الفرعية في Rows و Columns\n- Canvas: يتم تحديد موقع العناصر الفرعية باستخدام إحداثيات X و Y'
},
{
  question: 'ما هو بناء الجملة لـ ASP.NET؟',
  answer: 'ASP.NET Syntax يتكون من ملف HTML مع إمكانية احتواء Server-Side Scripts. مثال:\n\n<!DOCTYPE html>\n<html>\n<body>\n<%\nResponse.write("Hello World!")\n%>\n</body>\n</html>'
}
      
      
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    java: [
      {
          "question": "ما هو Java؟",
          "answer": "Java هو لغة برمجة كائنية التوجه تُستخدم لتطوير التطبيقات على أنظمة تشغيل متعددة."
      },
      {
          "question": "ما هي مميزات Java؟",
          "answer": "من مميزات Java هي قابلية التشغيل عبر المنصات، الأمان، إدارة الذاكرة التلقائية، ودعم البرمجة الكائنية."
      },
      {
          "question": "ما هو JVM؟",
          "answer": "JVM (Java Virtual Machine) هو محرك لتنفيذ برامج Java، يقوم بتحويل الكود إلى تعليمات يفهمها النظام."
      },
      {
          "question": "ما هو JDK و JRE؟",
          "answer": "JDK (Java Development Kit) هو مجموعة أدوات تطوير Java، بينما JRE (Java Runtime Environment) هو بيئة تشغيل Java."
      },
      {
          "question": "ما الفرق بين `==` و `equals()` في Java؟",
          "answer": "`==` يُستخدم لمقارنة المراجع، بينما `equals()` يُستخدم لمقارنة محتوى الكائنات."
      },
      {
          "question": "ما هو مفهوم الوراثة في Java؟",
          "answer": "الوراثة هي آلية تسمح لكائن بإرث الخصائص والسلوكيات من كائن آخر، مما يُسهل إعادة استخدام الكود."
      },
      {
          "question": "ما هو مفهوم الـ Interfaces في Java؟",
          "answer": "الـ Interfaces تُستخدم لتعريف مجموعة من الطرق التي يجب على الكائنات تنفيذها، مما يدعم البرمجة الكائنية."
      },
      {
          "question": "كيف تتعامل مع الاستثناءات في Java؟",
          "answer": "يمكن التعامل مع الاستثناءات باستخدام الكتل try-catch-finally."
      },
      {
          "question": "ما هي الـ Collections في Java؟",
          "answer": "الـ Collections هي مجموعة من الكائنات التي تُستخدم لتخزين البيانات وإدارتها، مثل ArrayList وHashMap."
      },
      {
          "question": "ما هو مفهوم الـ Multithreading في Java؟",
          "answer": "الـ Multithreading يسمح بتنفيذ عدة خيوط من التعليمات البرمجية في نفس الوقت، مما يُحسن أداء التطبيق."
      },
      {
          "question": "ما هو مفهوم الـ Garbage Collection؟",
          "answer": "Garbage Collection هو عملية تلقائية في Java تقوم بتحرير الذاكرة غير المستخدمة."
      },
      {
          "question": "ما هي الـ String Pool في Java؟",
          "answer": "String Pool هو منطقة في الذاكرة حيث يتم تخزين كائنات السلاسل النصية لتقليل استهلاك الذاكرة."
      },
      {
          "question": "ما هي الـ Annotations في Java؟",
          "answer": "Annotations هي وسوم تُستخدم لإضافة معلومات وصفية إلى الكود، مثل @Override و@SuppressWarnings."
      },
      {
          "question": "ما هو مفهوم الـ Enums في Java؟",
          "answer": "Enums هي نوع خاص من الكلاسات يُستخدم لتعريف مجموعة من القيم الثابتة."
      },
      {
          "question": "كيف يمكن تنفيذ الـ Interfaces المتعددة في Java؟",
          "answer": "يمكن تنفيذ الـ Interfaces المتعددة باستخدام الفاصلة (,) عند تعريف الكلاس."
      },
      {
          "question": "ما هي الـ Streams في Java؟",
          "answer": "Streams هي واجهة تُستخدم لمعالجة مجموعات البيانات بطريقة وظيفية، مثل الترشيح والتجميع."
      },
      {
          "question": "ما هو مفهوم الـ Lambda Expressions في Java؟",
          "answer": "Lambda Expressions تُستخدم لتوفير طريقة مختصرة لتعريف الـ Functional Interfaces."
      },
      {
          "question": "ما هو مفهوم الـ API في Java؟",
          "answer": "API (Application Programming Interface) هي مجموعة من التعريفات التي تسمح للتطبيقات بالتواصل مع بعضها البعض."
      },
      {
          "question": "ما هو مفهوم الـ Constructor في Java؟",
          "answer": "Constructor هو طريقة خاصة تُستخدم لتهيئة الكائنات عند إنشائها."
      },
      {
          "question": "ما الفرق بين الكلاس المجرد والواجهة؟",
          "answer": "الكلاس المجرد يمكن أن يحتوي على طرق مُعرفة وأخرى مجردة، بينما الواجهة تحتوي فقط على طرق مُعرفة."
      },
      {
          "question": "كيف يمكنك تحسين أداء تطبيق Java؟",
          "answer": "يمكن تحسين الأداء عن طريق تقليل استهلاك الذاكرة، استخدام خوارزميات فعالة، وتقليل استدعاءات الدوال غير الضرورية."
      },
      {
          "question": "ما هي استخدامات الـ HashMap في Java؟",
          "answer": "HashMap تُستخدم لتخزين البيانات في شكل أزواج مفتاح-قيمة، مما يتيح الوصول السريع إلى القيم."
      },
      {
          "question": "كيف تتعامل مع ملفات JSON في Java؟",
          "answer": "يمكن استخدام مكتبات مثل Jackson أو Gson لتحليل وإنشاء ملفات JSON."
      },
      {
          "question": "ما هو مفهوم الـ JUnit في Java؟",
          "answer": "JUnit هو إطار عمل يُستخدم لكتابة وتنفيذ اختبارات وحدات التطبيقات."
      },
      {
          "question": "كيف يمكنك إنشاء خيط في Java؟",
          "answer": "يمكن إنشاء خيط عن طريق تنفيذ واجهة Runnable أو وراثة الكلاس Thread."
      },
      {
          "question": "ما هو مفهوم الـ Synchronization في Java؟",
          "answer": "Synchronization يُستخدم لضمان أن خيطًا واحدًا فقط يمكنه الوصول إلى مورد معين في نفس الوقت."
      },
      {
          "question": "ما هو مفهوم الـ Reflection في Java؟",
          "answer": "Reflection يُستخدم للحصول على معلومات حول الكائنات، مثل خصائصها وطرقها، أثناء وقت التشغيل."
      },
      {
          "question": "ما هي المكتبات الشائعة المستخدمة مع Java؟",
          "answer": "بعض المكتبات الشائعة تشمل Spring، Hibernate، Apache Commons، وJUnit."
      },
      {
          "question": "كيف تتعامل مع قواعد البيانات في Java؟",
          "answer": "يمكن استخدام JDBC (Java Database Connectivity) للاتصال بقواعد البيانات وإجراء الاستعلامات."
      },
      {
          "question": "ما هو مفهوم الـ Serializable في Java؟",
          "answer": "Serializable هو واجهة تُستخدم لتحويل كائن إلى سلسلة من البايتات ليتم تخزينه أو نقله."
      },
      {
          "question": "كيف تتعامل مع التواريخ في Java؟",
          "answer": "يمكن استخدام مكتبة java.time (Java 8 وما بعدها) أو SimpleDateFormat للتعامل مع التواريخ."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    php: [
      {
          "question": "ما هو PHP؟",
          "answer": "PHP هي لغة برمجة نصية تُستخدم لتطوير تطبيقات الويب وتعمل على الخادم."
      },
      {
          "question": "ما هي مميزات PHP؟",
          "answer": "مميزات PHP تشمل السهولة في التعلم، دعم قواعد البيانات، مرونة البرمجة، ودعم مكتبات واسعة."
      },
      {
          "question": "ما الفرق بين `echo` و `print` في PHP؟",
          "answer": "`echo` يُستخدم لطباعة النصوص ولا يُرجع قيمة، بينما `print` يُرجع قيمة 1."
      },
      {
          "question": "ما هي المتغيرات في PHP؟",
          "answer": "المتغيرات في PHP تُستخدم لتخزين البيانات وتبدأ بعلامة الدولار ($)، مثل `$variableName`."
      },
      {
          "question": "كيف يمكننا إنشاء دالة في PHP؟",
          "answer": "يمكن إنشاء دالة باستخدام الكلمة المفتاحية `function`، مثل: `function myFunction() { ... }`."
      },
      {
          "question": "ما هي المصفوفات في PHP؟",
          "answer": "المصفوفات في PHP تُستخدم لتخزين مجموعات من القيم، ويمكن أن تكون مرتبطة أو عادية."
      },
      {
          "question": "كيف يمكنك الاتصال بقاعدة بيانات في PHP؟",
          "answer": "يمكنك استخدام `mysqli` أو `PDO` للاتصال بقاعدة بيانات مثل MySQL."
      },
      {
          "question": "ما هو مفهوم الـ Sessions في PHP؟",
          "answer": "Sessions تُستخدم لتخزين المعلومات على الخادم لمستخدم معين عبر عدة صفحات."
      },
      {
          "question": "كيف يمكنك التعامل مع الاستثناءات في PHP؟",
          "answer": "يمكن التعامل مع الاستثناءات باستخدام الكتل `try-catch`."
      },
      {
          "question": "ما هو مفهوم الـ Cookies في PHP؟",
          "answer": "Cookies تُستخدم لتخزين البيانات على جهاز المستخدم لتكون متاحة في الزيارات القادمة."
      },
      {
          "question": "كيف يمكنك إدراج ملف في PHP؟",
          "answer": "يمكن إدراج ملف باستخدام `include` أو `require`."
      },
      {
          "question": "ما هو مفهوم الـ OOP في PHP؟",
          "answer": "البرمجة الكائنية (OOP) في PHP تسمح بتعريف الكائنات، الوراثة، والتجريد."
      },
      {
          "question": "كيف يمكنك استخدام المكتبات في PHP؟",
          "answer": "يمكن استخدام المكتبات من خلال `Composer`، وهو مدير حزم لـ PHP."
      },
      {
          "question": "ما الفرق بين `==` و `===` في PHP؟",
          "answer": "`==` يُستخدم للمقارنة بقيمة متساوية، بينما `===` يُستخدم للمقارنة بقيمة ونوع متساويين."
      },
      {
          "question": "كيف يمكنك تنفيذ عمليات التحقق من البيانات في PHP؟",
          "answer": "يمكن استخدام دوال مثل `filter_var()` للتحقق من صحة البيانات."
      },
      {
          "question": "ما هو مفهوم الـ Namespaces في PHP؟",
          "answer": "Namespaces تُستخدم لتنظيم الكود وتجنب تعارض الأسماء بين الكائنات."
      },
      {
          "question": "كيف تتعامل مع الملفات في PHP؟",
          "answer": "يمكن استخدام دوال مثل `fopen()`, `fread()`, و`fwrite()` للتعامل مع الملفات."
      },
      {
          "question": "ما هو مفهوم الـ Composer في PHP؟",
          "answer": "Composer هو مدير حزم يُستخدم لإدارة المكتبات dependencies في مشاريع PHP."
      },
      {
          "question": "كيف يمكنك إنشاء واجهة برمجة تطبيقات RESTful في PHP؟",
          "answer": "يمكن استخدام المكتبات مثل Slim أو Laravel لإنشاء واجهات RESTful بسهولة."
      },
      {
          "question": "ما هي الطرق المختلفة للتعليق في PHP؟",
          "answer": "يمكن استخدام `//` للتعليقات الأحادية و `/* ... */` للتعليقات متعددة الأسطر."
      },
      {
          "question": "ما هو مفهوم الـ Traits في PHP؟",
          "answer": "Traits هي وسيلة لإعادة استخدام الكود عبر الكلاسات دون استخدام الوراثة."
      },
      {
          "question": "كيف يمكنك التحقق مما إذا كانت قيمة موجودة في مصفوفة؟",
          "answer": "يمكن استخدام الدالة `in_array()` للتحقق مما إذا كانت القيمة موجودة في المصفوفة."
      },
      {
          "question": "ما هو مفهوم الـ PDO في PHP؟",
          "answer": "PDO (PHP Data Objects) هي واجهة لقاعدة البيانات توفر طريقة آمنة ومرنة للتعامل مع قواعد البيانات."
      },
      {
          "question": "كيف يمكنك حماية تطبيقات PHP من هجمات SQL Injection؟",
          "answer": "يمكن استخدام Prepared Statements مع PDO أو MySQLi لحماية التطبيق من هجمات SQL Injection."
      },
      {
          "question": "ما هو مفهوم الـ Autoloading في PHP؟",
          "answer": "Autoloading يُستخدم لتحميل الكلاسات تلقائيًا عند الحاجة، بدلاً من تضمينها يدويًا."
      },
      {
          "question": "كيف يمكنك استخدام JSON في PHP؟",
          "answer": "يمكن استخدام دوال `json_encode()` و `json_decode()` للتعامل مع بيانات JSON."
      },
      {
          "question": "ما هو مفهوم الـ MVC في PHP؟",
          "answer": "MVC (Model-View-Controller) هو نمط تصميم يُستخدم لفصل منطق التطبيق عن واجهة المستخدم."
      },
      {
          "question": "كيف يمكنك إدارة الأخطاء في PHP؟",
          "answer": "يمكن إدارة الأخطاء باستخدام `set_error_handler()` و `set_exception_handler()`."
      },
      {
          "question": "ما هي المكتبات الشائعة المستخدمة مع PHP؟",
          "answer": "بعض المكتبات الشائعة تشمل Laravel، Symfony، وCodeIgniter."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    python: [
      {
          "question": "ما هو Python؟",
          "answer": "Python هي لغة برمجة عالية المستوى تُستخدم في تطوير التطبيقات، تحليل البيانات، تعلم الآلة، وغيرها."
      },
      {
          "question": "ما هي مميزات Python؟",
          "answer": "من مميزات Python سهولة القراءة، مكتبات واسعة، دعم البرمجة الكائنية، وقابلية التشغيل عبر المنصات."
      },
      {
          "question": "كيف يمكن تعريف دالة في Python؟",
          "answer": "يمكن تعريف دالة باستخدام الكلمة المفتاحية `def`، مثل: `def my_function():`."
      },
      {
          "question": "ما هو مفهوم القوائم (Lists) في Python؟",
          "answer": "القوائم هي هياكل بيانات تُستخدم لتخزين مجموعة من العناصر، ويمكن أن تحتوي على أنواع مختلفة."
      },
      {
          "question": "ما هو الفرق بين `list` و `tuple` في Python؟",
          "answer": "القوائم (`list`) قابلة للتغيير، بينما الـ `tuple` غير قابلة للتغيير."
      },
      {
          "question": "كيف يمكنك استيراد مكتبة في Python؟",
          "answer": "يمكن استيراد مكتبة باستخدام الكلمة المفتاحية `import`، مثل: `import math`."
      },
      {
          "question": "كيف يمكنك التعامل مع الاستثناءات في Python؟",
          "answer": "يمكن التعامل مع الاستثناءات باستخدام الكتل `try-except`."
      },
      {
          "question": "ما هو مفهوم القواميس (Dictionaries) في Python؟",
          "answer": "القواميس هي هياكل بيانات تُستخدم لتخزين أزواج المفتاح-القيمة."
      },
      {
          "question": "كيف يمكنك قراءة ملف في Python؟",
          "answer": "يمكن استخدام الدالة `open()` لقراءة الملفات، مثل: `with open('file.txt') as f:`."
      },
      {
          "question": "ما هو مفهوم الـ OOP في Python؟",
          "answer": "البرمجة الكائنية (OOP) تسمح بإنشاء كائنات يمكن أن تحتوي على بيانات وسلوكيات."
      },
      {
          "question": "كيف يمكنك استخدام المكتبات الخارجية في Python؟",
          "answer": "يمكن استخدام `pip` لتثبيت المكتبات الخارجية، مثل: `pip install requests`."
      },
      {
          "question": "ما هو مفهوم الدوال المجهولة (Lambda functions) في Python؟",
          "answer": "Lambda functions هي دوال صغيرة غير مسماة تُستخدم لإنشاء دوال بسيطة بسرعة."
      },
      {
          "question": "ما هي الـ List Comprehensions في Python؟",
          "answer": "List Comprehensions هي طريقة مختصرة لإنشاء القوائم باستخدام تعبيرات بسيطة."
      },
      {
          "question": "كيف يمكنك إدارة البيئة الافتراضية في Python؟",
          "answer": "يمكن استخدام `venv` لإنشاء وإدارة البيئات الافتراضية."
      },
      {
          "question": "ما هو مفهوم الـ Modules في Python؟",
          "answer": "Modules هي ملفات تحتوي على دوال وبيانات يمكن استخدامها في برامج أخرى."
      },
      {
          "question": "كيف يمكنك التعامل مع التاريخ والوقت في Python؟",
          "answer": "يمكن استخدام مكتبة `datetime` للتعامل مع التاريخ والوقت."
      },
      {
          "question": "ما هو مفهوم الـ Generators في Python؟",
          "answer": "Generators هي دوال تُستخدم لإنشاء متواليات قابلة للتكرار بشكل ديناميكي."
      },
      {
          "question": "كيف يمكنك استخدام الدوال الأساسية في Python؟",
          "answer": "يمكن استخدام دوال مثل `map()`, `filter()`, و`reduce()` لمعالجة البيانات."
      },
      {
          "question": "ما هو مفهوم الـ Decorators في Python؟",
          "answer": "Decorators هي دوال تُستخدم لتعديل سلوك دالة أخرى بدون تغيير كودها."
      },
      {
          "question": "كيف يمكنك إنشاء فئة في Python؟",
          "answer": "يمكن إنشاء فئة باستخدام الكلمة المفتاحية `class`, مثل: `class MyClass:`."
      },
      {
          "question": "ما هي المكتبات الشائعة المستخدمة مع Python؟",
          "answer": "بعض المكتبات الشائعة تشمل NumPy، Pandas، وFlask."
      },
      {
          "question": "كيف يمكنك تحويل سلسلة نصية إلى عدد في Python؟",
          "answer": "يمكن استخدام الدالة `int()` لتحويل سلسلة نصية إلى عدد صحيح، مثل: `int('123')`."
      },
      {
          "question": "ما هو مفهوم الـ Exception Handling في Python؟",
          "answer": "Exception Handling تُستخدم لإدارة الأخطاء التي تحدث أثناء تنفيذ البرنامج."
      },
      {
          "question": "كيف يمكنك فحص ما إذا كان عنصر موجودًا في قائمة؟",
          "answer": "يمكن استخدام العامل `in`، مثل: `if element in my_list:`."
      },
      {
          "question": "ما هو مفهوم الـ Context Managers في Python؟",
          "answer": "Context Managers تُستخدم لإدارة الموارد بشكل صحيح، مثل فتح وإغلاق الملفات."
      },
      {
          "question": "كيف يمكنك تنفيذ الاختبارات في Python؟",
          "answer": "يمكن استخدام إطار عمل مثل `unittest` لكتابة وتنفيذ اختبارات الوحدات."
      },
      {
          "question": "ما هو مفهوم الـ API في Python؟",
          "answer": "API (Application Programming Interface) يُستخدم للتفاعل بين التطبيقات والبرامج."
      },
      {
          "question": "كيف يمكنك إنشاء خيط في Python؟",
          "answer": "يمكن استخدام مكتبة `threading` لإنشاء خيوط جديدة."
      },
      {
          "question": "ما هي الـ Pandas في Python؟",
          "answer": "Pandas هي مكتبة تُستخدم لتحليل البيانات والتلاعب بها بسهولة."
      },
      {
          "question": "كيف يمكنك تصحيح الأخطاء في Python؟",
          "answer": "يمكن استخدام `print()` لتصحيح الأخطاء أو استخدام مكتبة `pdb` لتصحيح الأخطاء بشكل تفاعلي."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ruby: [
      {
          "question": "ما هو Ruby؟",
          "answer": "Ruby هي لغة برمجة كائنية التوجه تُستخدم لتطوير تطبيقات الويب، وتتميز بالبساطة والوضوح."
      },
      {
          "question": "ما هي مميزات Ruby؟",
          "answer": "من مميزات Ruby سهولة القراءة، دعم البرمجة الكائنية، والمكتبات الواسعة المتاحة."
      },
      {
          "question": "كيف يمكن تعريف دالة في Ruby؟",
          "answer": "يمكن تعريف دالة باستخدام الكلمة المفتاحية `def`، مثل: `def my_method`."
      },
      {
          "question": "ما هو مفهوم الكلاسات (Classes) في Ruby؟",
          "answer": "الكلاسات هي هياكل تُستخدم لتعريف كائنات وتحديد الخصائص والسلوكيات المرتبطة بها."
      },
      {
          "question": "كيف يمكن إنشاء كائن من كلاس في Ruby؟",
          "answer": "يمكن إنشاء كائن باستخدام `MyClass.new`."
      },
      {
          "question": "ما هي المصفوفات (Arrays) في Ruby؟",
          "answer": "المصفوفات تُستخدم لتخزين مجموعة من العناصر، ويمكن أن تحتوي على أنواع مختلفة."
      },
      {
          "question": "كيف يمكنك قراءة ملف في Ruby؟",
          "answer": "يمكن استخدام `File.read('filename.txt')` لقراءة محتوى الملف."
      },
      {
          "question": "ما هو مفهوم الـ Hash في Ruby؟",
          "answer": "الـ Hash هي بنية بيانات تُستخدم لتخزين أزواج المفتاح-القيمة."
      },
      {
          "question": "كيف يمكنك التعامل مع الاستثناءات في Ruby؟",
          "answer": "يمكن التعامل مع الاستثناءات باستخدام الكتل `begin-rescue`."
      },
      {
          "question": "ما هو مفهوم الـ Blocks في Ruby؟",
          "answer": "Blocks هي أجزاء من الكود يمكن تمريرها كوسائط إلى الدوال، وتُستخدم لتنفيذ كود معين."
      },
      {
          "question": "كيف يمكنك استخدام المكتبات الخارجية في Ruby؟",
          "answer": "يمكن استخدام `gem` لتثبيت المكتبات الخارجية، مثل: `gem install rails`."
      },
      {
          "question": "ما هو مفهوم الـ Mixins في Ruby؟",
          "answer": "Mixins تُستخدم لدمج خصائص من كلاسات متعددة، مما يعزز إعادة استخدام الكود."
      },
      {
          "question": "كيف يمكنك استخدام الـ Iterators في Ruby؟",
          "answer": "يمكن استخدام دوال مثل `each` و `map` للتكرار عبر المصفوفات والكلاسات."
      },
      {
          "question": "ما هو مفهوم الـ Enumerable في Ruby؟",
          "answer": "Enumerable هو موديول يُستخدم لتوفير دوال للتكرار والتحليل على المجموعات."
      },
      {
          "question": "كيف يمكنك إجراء اختبارات في Ruby؟",
          "answer": "يمكن استخدام إطار عمل مثل `RSpec` لكتابة وتنفيذ اختبارات الوحدات."
      },
      {
          "question": "ما هي الطرق المختلفة لتعريف المتغيرات في Ruby؟",
          "answer": "يمكن تعريف المتغيرات باستخدام `@` للكائنات، `@@` للمتغيرات العامة، وبدون علامات للمتغيرات المحلية."
      },
      {
          "question": "كيف يمكنك إدارة البيئة الافتراضية في Ruby؟",
          "answer": "يمكن استخدام `rbenv` أو `RVM` لإدارة إصدارات Ruby والبيئات الافتراضية."
      },
      {
          "question": "ما هو مفهوم الـ Self في Ruby؟",
          "answer": "Self يُشير إلى الكائن الحالي، ويُستخدم داخل الكلاسات لتعريف الأساليب والخصائص."
      },
      {
          "question": "كيف يمكنك إنشاء واجهة برمجة تطبيقات RESTful في Ruby؟",
          "answer": "يمكن استخدام إطار العمل Rails لإنشاء واجهات RESTful بسهولة."
      },
      {
          "question": "ما هو مفهوم الـ Gem في Ruby؟",
          "answer": "Gem هو حزمة من الكود يمكن تثبيتها واستخدامها، مثل المكتبات البرمجية."
      },
      {
          "question": "كيف يمكنك تحويل سلسلة نصية إلى عدد في Ruby؟",
          "answer": "يمكن استخدام `to_i` لتحويل سلسلة نصية إلى عدد صحيح، مثل: `'123'.to_i`."
      },
      {
          "question": "ما هو مفهوم الـ ActiveRecord في Ruby on Rails؟",
          "answer": "ActiveRecord هو إطار عمل ORM يُستخدم للتفاعل مع قواعد البيانات في Rails."
      },
      {
          "question": "كيف يمكنك إدارة الأخطاء في Ruby؟",
          "answer": "يمكن إدارة الأخطاء باستخدام `begin-rescue` لتحديد السلوك عند حدوث الأخطاء."
      },
      {
          "question": "ما هي المكتبات الشائعة المستخدمة مع Ruby؟",
          "answer": "بعض المكتبات الشائعة تشمل Rails، Sinatra، وPuma."
      },
      {
          "question": "كيف يمكنك تنفيذ عمليات التحقق من البيانات في Ruby؟",
          "answer": "يمكن استخدام دوال مثل `valid?` في Rails للتحقق من صحة البيانات."
      },
      {
          "question": "ما هو مفهوم الـ Procs وLambdas في Ruby؟",
          "answer": "Procs وLambdas هما كائنات تُستخدم لتخزين كتلة من التعليمات البرمجية وإعادة استخدامها."
      },
      {
          "question": "كيف يمكنك التحقق مما إذا كان عنصر موجودًا في Hash؟",
          "answer": "يمكن استخدام `hash.key?(key)` للتحقق مما إذا كان المفتاح موجودًا في Hash."
      },
      {
          "question": "ما هو مفهوم الـ Time في Ruby؟",
          "answer": "Time تُستخدم لتمثيل الوقت والتاريخ، ويمكن استخدامها مع دوال مثل `Time.now`."
      },
      {
          "question": "كيف يمكنك التعامل مع JSON في Ruby؟",
          "answer": "يمكن استخدام مكتبة `json` لتحليل وإنشاء بيانات JSON."
      },
      {
          "question": "كيف يمكنك تنفيذ خيوط في Ruby؟",
          "answer": "يمكن استخدام `Thread.new` لإنشاء خيط جديد."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    angular: [
      {
          "question": "ما هو Angular؟",
          "answer": "Angular هو إطار عمل لبناء تطبيقات الويب أحادية الصفحة (SPA) باستخدام TypeScript."
      },
      {
          "question": "ما هي مميزات Angular؟",
          "answer": "مميزات Angular تشمل الأداء العالي، الهيكلية الواضحة، دعم التوجيه، وإمكانية إعادة استخدام المكونات."
      },
      {
          "question": "ما هو مفهوم المكونات (Components) في Angular؟",
          "answer": "المكونات هي اللبنات الأساسية في Angular، تمثل جزءًا من واجهة المستخدم وتحتوي على منطقها."
      },
      {
          "question": "ما هو مفهوم الخدمات (Services) في Angular؟",
          "answer": "الخدمات تُستخدم لتوفير منطق مشترك بين المكونات، وتُستخدم عادةً للتفاعل مع واجهات برمجة التطبيقات."
      },
      {
          "question": "كيف يمكنك إنشاء مكون جديد في Angular؟",
          "answer": "يمكنك إنشاء مكون جديد باستخدام الأمر `ng generate component component-name`."
      },
      {
          "question": "ما هو مفهوم التوجيه (Routing) في Angular؟",
          "answer": "التوجيه يُستخدم للتنقل بين المكونات في تطبيق Angular، ويمكن تعريفه في ملف `app-routing.module.ts`."
      },
      {
          "question": "كيف يمكنك تمرير البيانات بين المكونات؟",
          "answer": "يمكن تمرير البيانات باستخدام المدخلات (`@Input`) والمخرجات (`@Output`) في Angular."
      },
      {
          "question": "ما هو مفهوم الـ Dependency Injection في Angular؟",
          "answer": "Dependency Injection يُستخدم لإدارة الاعتمادات بين الكائنات، مما يعزز قابلية إعادة الاستخدام والاختبار."
      },
      {
          "question": "ما هي RxJS وما دورها في Angular؟",
          "answer": "RxJS هي مكتبة تُستخدم لمعالجة البيانات غير المتزامنة باستخدام البرمجة التفاعلية."
      },
      {
          "question": "كيف يمكنك تنفيذ النموذج (Forms) في Angular؟",
          "answer": "يمكن استخدام نموذج تفاعلي (`Reactive Forms`) أو نموذج مباشر (`Template-driven Forms`) لإنشاء النماذج."
      },
      {
          "question": "ما هو مفهوم الـ Pipes في Angular؟",
          "answer": "Pipes تُستخدم لتحويل البيانات في القوالب، مثل تحويل التاريخ أو الأرقام."
      },
      {
          "question": "كيف يمكنك استخدام HttpClient في Angular؟",
          "answer": "يمكن استخدام `HttpClient` للتفاعل مع واجهات برمجة التطبيقات، وذلك بعد استيراد `HttpClientModule`."
      },
      {
          "question": "ما هو مفهوم الـ Observables في Angular؟",
          "answer": "Observables هي نمط للبرمجة يسمح بالتعامل مع تدفقات البيانات غير المتزامنة."
      },
      {
          "question": "كيف يمكنك استخدام الحراس (Guards) في Angular؟",
          "answer": "الحراس تُستخدم للتحكم في الوصول إلى المسارات، ويمكن استخدامها مع `CanActivate`."
      },
      {
          "question": "ما هو مفهوم الـ Lifecycle Hooks في Angular؟",
          "answer": "Lifecycle Hooks هي دوال تُستدعى في مراحل حياة المكون، مثل `ngOnInit` و`ngOnDestroy`."
      },
      {
          "question": "كيف يمكنك إدارة الحالة في تطبيق Angular؟",
          "answer": "يمكن استخدام مكتبة مثل NgRx لإدارة الحالة في تطبيقات Angular."
      },
      {
          "question": "ما هي طرق التفاعل مع عناصر DOM في Angular؟",
          "answer": "يمكن استخدام `@ViewChild` و`@ElementRef` للتفاعل مع عناصر DOM."
      },
      {
          "question": "كيف يمكنك إضافة أنماط (Styles) إلى مكونات Angular؟",
          "answer": "يمكن إضافة أنماط مباشرة في المكون أو من خلال ملفات CSS مرتبطة بالمكون."
      },
      {
          "question": "ما هو مفهوم الـ Module في Angular؟",
          "answer": "Modules تُستخدم لتنظيم المكونات والخدمات، ويمكن أن تحتوي على ميزات متعددة."
      },
      {
          "question": "كيف يمكنك التعامل مع الأخطاء في Angular؟",
          "answer": "يمكن استخدام `HttpInterceptor` أو `ErrorHandler` لإدارة الأخطاء في تطبيقات Angular."
      },
      {
          "question": "ما هو مفهوم الـ NgModule في Angular؟",
          "answer": "NgModule هو وحدة بناء تُستخدم لتجميع المكونات والخدمات، وتُستخدم لتحديد التطبيقات."
      },
      {
          "question": "كيف يمكنك استخدام الاختبارات في Angular؟",
          "answer": "يمكن استخدام Jasmine وKarma لكتابة وتنفيذ اختبارات الوحدات في Angular."
      },
      {
          "question": "ما هو مفهوم الـ Async Pipe في Angular؟",
          "answer": "Async Pipe يُستخدم في القوالب للتعامل مع Observables بسهولة، مما يُسهل عرض البيانات."
      },
      {
          "question": "كيف يمكنك استخدام الرسوم المتحركة (Animations) في Angular؟",
          "answer": "يمكن استخدام مكتبة الرسوم المتحركة المدمجة في Angular لإضافة تأثيرات الرسوم المتحركة بسهولة."
      },
      {
          "question": "ما هو مفهوم الـ Dynamic Components في Angular؟",
          "answer": "Dynamic Components تُستخدم لإنشاء مكونات في وقت التشغيل، مما يسمح بزيادة مرونة التطبيق."
      },
      {
          "question": "كيف يمكنك تحسين أداء تطبيق Angular؟",
          "answer": "يمكن تحسين الأداء باستخدام تقنيات مثل Lazy Loading وChange Detection Strategy."
      },
      {
          "question": "ما هو مفهوم الـ Service Workers في Angular؟",
          "answer": "Service Workers تُستخدم لتوفير تجربة مستخدم غير متصلة بالإنترنت من خلال التخزين المؤقت للموارد."
      },
      {
          "question": "كيف يمكنك تنسيق البيانات في Angular باستخدام Pipes؟",
          "answer": "يمكن استخدام Pipes مثل `date` و`currency` لتنسيق البيانات في القوالب."
      },
      {
          "question": "ما هو مفهوم الـ Event Binding في Angular؟",
          "answer": "Event Binding يُستخدم للاستماع إلى أحداث المستخدم، مثل النقر على زر، من خلال استخدام `()` في القوالب."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    vueJS: [
      {
          "question": "ما هو Vue.js؟",
          "answer": "Vue.js هو إطار عمل لتطوير واجهات المستخدم، يُستخدم لبناء تطبيقات الويب أحادية الصفحة (SPA)."
      },
      {
          "question": "ما هي مميزات Vue.js؟",
          "answer": "من مميزات Vue.js سهولة التعلم، الأداء العالي، دعم التوجيه، والتفاعل السلس مع DOM."
      },
      {
          "question": "ما هو مفهوم المكونات (Components) في Vue.js؟",
          "answer": "المكونات هي وحدات مستقلة تعيد استخدام الشيفرة، وتحتوي على منطق وعرض معين."
      },
      {
          "question": "كيف يمكنك إنشاء مكون جديد في Vue.js؟",
          "answer": "يمكنك إنشاء مكون جديد عن طريق تعريف كائن جديد مع خيارات المكون، مثل: `Vue.component('my-component', { ... })`."
      },
      {
          "question": "ما هو مفهوم الـ Vue Instance؟",
          "answer": "Vue Instance هو كائن يمثل تطبيق Vue، ويُستخدم لربط البيانات بالمكونات."
      },
      {
          "question": "كيف يمكنك إدارة الحالة في تطبيق Vue.js؟",
          "answer": "يمكن استخدام Vuex لإدارة الحالة في تطبيقات Vue، مما يسمح بإدارة البيانات بشكل مركزي."
      },
      {
          "question": "ما هو مفهوم التوجيه (Routing) في Vue.js؟",
          "answer": "التوجيه يُستخدم للتنقل بين المكونات، ويمكن استخدام Vue Router لإدارة التنقل."
      },
      {
          "question": "كيف يمكنك تمرير البيانات بين المكونات؟",
          "answer": "يمكن تمرير البيانات باستخدام props للمدخلات و$emit لإرسال الأحداث إلى المكونات العليا."
      },
      {
          "question": "ما هو مفهوم الـ Directives في Vue.js؟",
          "answer": "Directives هي تعليمات خاصة تُستخدم في القوالب لتعديل سلوك العناصر، مثل `v-if` و`v-for`."
      },
      {
          "question": "كيف يمكنك استخدام Vue CLI؟",
          "answer": "يمكن استخدام Vue CLI لإنشاء مشاريع Vue جديدة بسهولة باستخدام الأمر `vue create project-name`."
      },
      {
          "question": "ما هو مفهوم الـ Computed Properties في Vue.js؟",
          "answer": "Computed Properties تُستخدم لحساب القيم بناءً على البيانات التفاعلية، وتُحدث تلقائيًا عند تغيير البيانات."
      },
      {
          "question": "كيف يمكنك التعامل مع الأحداث في Vue.js؟",
          "answer": "يمكن التعامل مع الأحداث باستخدام `v-on` أو الاختصارات مثل `@click`."
      },
      {
          "question": "ما هو مفهوم الـ Watchers في Vue.js؟",
          "answer": "Watchers تُستخدم لمراقبة التغيرات في البيانات وتنفيذ الشيفرة عند حدوثها."
      },
      {
          "question": "كيف يمكنك تنفيذ النماذج (Forms) في Vue.js؟",
          "answer": "يمكن استخدام v-model لربط البيانات بالنماذج، مما يُسهل عملية التفاعل مع المستخدم."
      },
      {
          "question": "ما هو مفهوم الـ Filters في Vue.js؟",
          "answer": "Filters تُستخدم لتنسيق البيانات في القوالب، مثل تحويل التاريخ أو الأرقام."
      },
      {
          "question": "كيف يمكنك استخدام Vue Devtools؟",
          "answer": "Vue Devtools هي إضافة متصفح تُستخدم لتسهيل تطوير تطبيقات Vue، وتتيح لك فحص الحالة والمكونات."
      },
      {
          "question": "ما هو مفهوم الـ Mixins في Vue.js؟",
          "answer": "Mixins تُستخدم لإعادة استخدام الشيفرة بين المكونات، وتسمح بمشاركة الوظائف المشتركة."
      },
      {
          "question": "كيف يمكنك تحسين أداء تطبيق Vue.js؟",
          "answer": "يمكن تحسين الأداء باستخدام تقنيات مثل Lazy Loading وOptimized Rendering."
      },
      {
          "question": "ما هو مفهوم الـ Slots في Vue.js؟",
          "answer": "Slots تُستخدم لتمرير محتوى مخصص إلى المكونات، مما يوفر مرونة في تصميم الواجهة."
      },
      {
          "question": "كيف يمكنك استخدام Vue Router؟",
          "answer": "يمكن تثبيت Vue Router واستخدامه لتحديد المسارات والتوجيه بين المكونات."
      },
      {
          "question": "ما هو مفهوم الـ Vuex Store؟",
          "answer": "Vuex Store هو مركز إدارة الحالة في تطبيقات Vue، حيث يُخزن الحالة المشتركة بين المكونات."
      },
      {
          "question": "كيف يمكنك استخدام الـ Lifecycle Hooks في Vue.js؟",
          "answer": "Lifecycle Hooks تُستخدم لتنفيذ الشيفرة في مراحل مختلفة من دورة حياة المكون، مثل `mounted` و`destroyed`."
      },
      {
          "question": "ما هو مفهوم الـ Dynamic Components في Vue.js؟",
          "answer": "Dynamic Components تُستخدم لإنشاء مكونات في وقت التشغيل بناءً على البيانات."
      },
      {
          "question": "كيف يمكنك التعامل مع الأخطاء في Vue.js؟",
          "answer": "يمكن استخدام `errorCaptured` و`errorHandler` لإدارة الأخطاء في تطبيقات Vue."
      },
      {
          "question": "ما هو مفهوم الـ Async Components في Vue.js؟",
          "answer": "Async Components تُستخدم لتحميل المكونات عند الحاجة، مما يُحسن أداء التطبيق."
      },
      {
          "question": "كيف يمكنك استخدام الـ Composition API في Vue 3؟",
          "answer": "يمكن استخدام Composition API لتنظيم الشيفرة بطريقة أكثر مرونة باستخدام `setup()`."
      },
      {
          "question": "ما هو مفهوم الـ Refs في Vue.js؟",
          "answer": "Refs تُستخدم للوصول إلى عناصر DOM أو مكونات Vue بشكل مباشر."
      },
      {
          "question": "كيف يمكنك تنفيذ اختبارات في Vue.js؟",
          "answer": "يمكن استخدام أدوات مثل Jest وVue Test Utils لكتابة وتنفيذ اختبارات الوحدات."
      },
      {
          "question": "ما هو مفهوم الـ Teleport في Vue 3؟",
          "answer": "Teleport تُستخدم لنقل المكونات إلى أماكن مختلفة في شجرة DOM، مما يُحسن تنظيم الواجهة."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    kotlin: [
      {
          "question": "ما هو Kotlin؟",
          "answer": "Kotlin هو لغة برمجة حديثة تم تطويرها بواسطة JetBrains، وتُستخدم بشكل رئيسي لتطوير تطبيقات Android."
      },
      {
          "question": "ما هي مميزات Kotlin؟",
          "answer": "من مميزات Kotlin القابلية للتوافق مع Java، التركيب النحوي الواضح، دعم البرمجة الوظيفية، وتقليل كمية الكود."
      },
      {
          "question": "كيف يمكنك تعريف متغير في Kotlin؟",
          "answer": "يمكنك تعريف متغير باستخدام `val` للمتغيرات الثابتة و`var` للمتغيرات القابلة للتغيير، مثل: `val x = 10`."
      },
      {
          "question": "ما هو مفهوم Null Safety في Kotlin؟",
          "answer": "Null Safety يُستخدم لتجنب الأخطاء المتعلقة بالقيم null عن طريق استخدام نوع البيانات القابل لـ null، مثل: `String?`."
      },
      {
          "question": "كيف يمكنك إنشاء دالة في Kotlin؟",
          "answer": "يمكنك إنشاء دالة باستخدام الكلمة المفتاحية `fun`، مثل: `fun myFunction() { ... }`."
      },
      {
          "question": "ما هو مفهوم الـ Data Classes في Kotlin؟",
          "answer": "Data Classes تُستخدم لإنشاء كائنات تمثل بيانات، وتوفر وظائف مثل `toString()` و`equals()` بشكل تلقائي."
      },
      {
          "question": "كيف يمكنك التعامل مع القوائم في Kotlin؟",
          "answer": "يمكنك استخدام `List` لإنشاء قوائم، ويمكن أن تكون ثابتة أو قابلة للتغيير باستخدام `mutableListOf()`."
      },
      {
          "question": "ما هو مفهوم الـ Extension Functions في Kotlin؟",
          "answer": "Extension Functions تُستخدم لإضافة وظائف جديدة إلى الفئات الموجودة دون تعديلها، مثل: `fun String.lastChar() { ... }`."
      },
      {
          "question": "كيف يمكنك استخدام الـ Lambdas في Kotlin؟",
          "answer": "يمكنك استخدام Lambdas كدوال مجهولة، مثل: `val sum = { a: Int, b: Int -> a + b }`."
      },
      {
          "question": "ما هو مفهوم الـ Coroutines في Kotlin؟",
          "answer": "Coroutines تُستخدم لإجراء العمليات غير المتزامنة بشكل أكثر سهولة ووضوح، مما يُحسن أداء التطبيقات."
      },
      {
          "question": "كيف يمكنك التعامل مع الاستثناءات في Kotlin؟",
          "answer": "يمكن التعامل مع الاستثناءات باستخدام الكتل `try-catch`، مثل: `try { ... } catch (e: Exception) { ... }`."
      },
      {
          "question": "ما هو مفهوم الـ Sealed Classes في Kotlin؟",
          "answer": "Sealed Classes تُستخدم لتقييد الفئات إلى عدد معين من الفئات الفرعية، مما يُحسن الأمان النوعي."
      },
      {
          "question": "كيف يمكنك استخدام الـ Interfaces في Kotlin؟",
          "answer": "يمكن تعريف واجهات باستخدام الكلمة المفتاحية `interface`، ويمكن تنفيذها بواسطة الفئات."
      },
      {
          "question": "ما هو مفهوم الـ Companion Objects في Kotlin؟",
          "answer": "Companion Objects تُستخدم لتعريف كائن ثابت مرتبط بالفئة، مما يُتيح الوصول إلى الوظائف الثابتة."
      },
      {
          "question": "كيف يمكنك استخدام الـ Higher-Order Functions في Kotlin؟",
          "answer": "Higher-Order Functions هي دوال تأخذ دوالًا أخرى كوسائط أو تُعيد دوال، مثل: `fun operate(action: (Int) -> Int) { ... }`."
      },
      {
          "question": "ما هي المكتبات الشائعة المستخدمة مع Kotlin؟",
          "answer": "بعض المكتبات الشائعة تشمل Ktor، Koin، وExposed."
      },
      {
          "question": "كيف يمكنك تنفيذ النماذج في Kotlin باستخدام Android؟",
          "answer": "يمكن استخدام مكتبات مثل Retrofit وGson لإنشاء نماذج والتفاعل مع واجهات برمجة التطبيقات."
      },
      {
          "question": "ما هو مفهوم الـ Delegation في Kotlin؟",
          "answer": "Delegation يُستخدم لتفويض تنفيذ وظائف معينة إلى كائن آخر، مما يُعزز إعادة استخدام الشيفرة."
      },
      {
          "question": "كيف يمكنك استخدام الـ When في Kotlin؟",
          "answer": "يمكن استخدام `when` كبديل لـ `if-else`، مما يجعل الشيفرة أكثر وضوحًا، مثل: `when (x) { ... }`."
      },
      {
          "question": "ما هو مفهوم الـ Inline Functions في Kotlin؟",
          "answer": "Inline Functions تُستخدم لتحسين الأداء من خلال تقليل استدعاءات الدوال، مما يُسرع تنفيذ الشيفرة."
      },
      {
          "question": "كيف يمكنك التعامل مع الـ JSON في Kotlin؟",
          "answer": "يمكن استخدام مكتبة Gson أو kotlinx.serialization لتحليل وإنشاء بيانات JSON."
      },
      {
          "question": "ما هو مفهوم الـ Annotations في Kotlin؟",
          "answer": "Annotations تُستخدم لإضافة معلومات وصفية إلى الشيفرة، ويمكن استخدامها لتوجيه سلوك التطبيقات."
      },
      {
          "question": "كيف يمكنك استخدام الـ Generics في Kotlin؟",
          "answer": "Generics تُستخدم لتمكين الفئات والدوال من العمل مع أنواع متعددة، مثل: `fun <T> printList(list: List<T>) { ... }`."
      },
      {
          "question": "ما هو مفهوم الـ Object Expressions في Kotlin؟",
          "answer": "Object Expressions تُستخدم لإنشاء كائنات جديدة بسرعة دون الحاجة إلى تعريف فئة جديدة."
      },
      {
          "question": "كيف يمكنك التعامل مع الـ Collections في Kotlin؟",
          "answer": "يمكن استخدام `List` و`Set` و`Map` لإدارة المجموعات، ويمكن استخدام دوال مثل `filter` و`map` للتلاعب بها."
      },
      {
          "question": "ما هي الفروق بين `val` و`var` في Kotlin؟",
          "answer": "`val` تُستخدم لتعريف متغيرات ثابتة لا يمكن تغييرها، بينما `var` تُستخدم لتعريف متغيرات قابلة للتغيير."
      },
      {
          "question": "كيف يمكنك استخدام الـ Unit في Kotlin؟",
          "answer": "Unit يُستخدم للدلالة على دالة لا تُعيد قيمة، وهو مكافئ لـ `void` في Java."
      },
      {
          "question": "ما هو مفهوم الـ Operator Overloading في Kotlin؟",
          "answer": "Operator Overloading يُستخدم لتعريف سلوك خاص لمشغل معين عند استخدامه مع كائنات من فئات مخصصة."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    database: [
      {
          "question": "ما هي الdatabase؟",
          "answer": "قاعدة البيانات هي مجموعة منظمة من البيانات تُستخدم لتخزين المعلومات بطريقة تسمح بالاسترجاع والتحديث بسهولة."
      },
      {
          "question": "ما هي SQL؟",
          "answer": "SQL (Structured Query Language) هي لغة برمجة تُستخدم لإدارة واسترجاع البيانات في قواعد البيانات العلائقية."
      },
      {
          "question": "ما هو مفهوم الـ ACID في database؟",
          "answer": "ACID هو مجموعة من الخصائص لضمان معالجة المعاملات بشكل موثوق، وهي تتضمن: Atomicity وConsistency وIsolation وDurability."
      },
      {
          "question": "ما هي الـ Joins في SQL؟",
          "answer": "Joins تُستخدم لربط صفوف من جدولين أو أكثر بناءً على شرط معين، مثل INNER JOIN وLEFT JOIN."
      },
      {
          "question": "ما الفرق بين الـ INNER JOIN و الـ OUTER JOIN؟",
          "answer": "INNER JOIN يُرجع الصفوف المتطابقة في كلا الجدولين، بينما OUTER JOIN يُرجع الصفوف المتطابقة بالإضافة إلى الصفوف غير المتطابقة من جدول واحد."
      },
      {
          "question": "ما هو مفهوم الـ Primary Key؟",
          "answer": "Primary Key هو عمود (أو مجموعة أعمدة) يُستخدم لتحديد كل سجل بشكل فريد في الجدول."
      },
      {
          "question": "ما هو مفهوم الـ Foreign Key؟",
          "answer": "Foreign Key هو عمود يُستخدم لربط جدولين معًا، حيث يشير إلى الـ Primary Key في جدول آخر."
      },
      {
          "question": "ما هي الـ Normalization في database؟",
          "answer": "Normalization هي عملية تنظيم البيانات في database لتقليل التكرار وتعزيز تكامل البيانات."
      },
      {
          "question": "ما هو مفهوم الـ Denormalization؟",
          "answer": "Denormalization هي عملية دمج الجداول لتحسين أداء الاستعلامات، على حساب زيادة التكرار."
      },
      {
          "question": "ما هو مفهوم الـ Indexing؟",
          "answer": "Indexing تُستخدم لتحسين سرعة عمليات الاستعلام عن طريق إنشاء هيكل بيانات يُسرع الوصول إلى الصفوف."
      },
      {
          "question": "ما هو الفرق بين الـ clustered و الـ non-clustered index؟",
          "answer": "Clustered Index يُحدد كيفية تخزين الصفوف في القرص، بينما Non-clustered Index يُحتفظ به في هيكل منفصل."
      },
      {
          "question": "ما هو الـ SQL Injection؟",
          "answer": "SQL Injection هو هجوم يُستخدم لاستغلال الثغرات في تطبيقات الويب من خلال إدخال أوامر SQL ضارة."
      },
      {
          "question": "ما هو مفهوم الـ Transactions في database؟",
          "answer": "Transactions هي مجموعة من العمليات التي تُعالج ككل، حيث يجب أن تنجح جميعها أو تفشل."
      },
      {
          "question": "ما هو مفهوم الـ View في SQL؟",
          "answer": "View هو استعلام مخزن يُستخدم كجدول افتراضي، مما يسهل عرض البيانات المعقدة."
      },
      {
          "question": "كيف يمكن استخدام الـ Stored Procedures؟",
          "answer": "Stored Procedures هي مجموعة من التعليمات SQL تُخزن في قاعدة البيانات ويمكن استدعاؤها من التطبيقات."
      },
      {
          "question": "ما هو مفهوم الـ Triggers في database؟",
          "answer": "Triggers هي إجراءات تُنفذ تلقائيًا استجابة لحدث معين، مثل INSERT أو UPDATE."
      },
      {
          "question": "ما هو الـ Data Warehouse؟",
          "answer": "Data Warehouse هو نظام يُستخدم لتخزين البيانات من مصادر متعددة لغرض التحليل والتقارير."
      },
      {
          "question": "ما هو مفهوم الـ OLTP و OLAP؟",
          "answer": "OLTP (Online Transaction Processing) يُستخدم لإدارة المعاملات اليومية، بينما OLAP (Online Analytical Processing) يُستخدم للتحليل وإعداد التقارير."
      },
      {
          "question": "ما هي قواعد البيانات NoSQL؟",
          "answer": "NoSQL هي نوع من قواعد البيانات التي لا تستخدم SQL كوسيلة رئيسية للاستعلام، وتدعم أنواع بيانات متنوعة."
      },
      {
          "question": "ما هو MongoDB؟",
          "answer": "MongoDB هو نظام قاعدة بيانات NoSQL يُخزن البيانات في تنسيق JSON-like، مما يُتيح هيكل مرن."
      },
      {
          "question": "كيف يمكنك تحسين أداء استعلامات SQL؟",
          "answer": "يمكن تحسين أداء استعلامات SQL عن طريق استخدام الفهارس، تحسين الاستعلامات، وتقليل التكرار."
      },
      {
          "question": "ما هو الـ Data Integrity؟",
          "answer": "Data Integrity تشير إلى دقة وموثوقية البيانات المخزنة في database"
      },
      {
          "question": "ما هو مفهوم الـ Schema في database؟",
          "answer": "Schema هو هيكل يحدد كيفية تنظيم البيانات داخل database، بما في ذلك الجداول والعلاقات."
      },
      {
          "question": "كيف يمكنك استرجاع البيانات من قاعدة بيانات باستخدام SQL؟",
          "answer": "يمكن استرجاع البيانات باستخدام استعلام SELECT، مثل: `SELECT * FROM table_name WHERE condition`."
      },
      {
          "question": "ما هو مفهوم الـ Aggregate Functions في SQL؟",
          "answer": "Aggregate Functions تُستخدم لإجراء عمليات حسابية على مجموعة من القيم، مثل SUM وCOUNT وAVG."
      },
      {
          "question": "ما هو مفهوم الـ Constraints في SQL؟",
          "answer": "Constraints تُستخدم لتحديد القواعد على البيانات في الجدول، مثل NOT NULL وUNIQUE وCHECK."
      },
      {
          "question": "كيف يمكنك إجراء نسخ احتياطي لdatabase؟",
          "answer": "يمكن إجراء نسخ احتياطي باستخدام أدوات خاصة بdatabase أو من خلال الأوامر SQL."
      },
      {
          "question": "ما هو الـ Replication في database؟",
          "answer": "Replication هي عملية نسخ البيانات من قاعدة بيانات إلى أخرى لتحسين التوفر والموثوقية."
      },
      {
          "question": "ما هو الـ Partitioning في database؟",
          "answer": "Partitioning تُستخدم لتقسيم جدول كبير إلى أجزاء أصغر لتحسين الأداء وإدارة البيانات."
      }
  ],
  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    laravel:[
        {
        question: 'ما هو Laravel وما هي مميزاته الرئيسية؟',
        answer: 'Laravel هو PHP Framework مفتوح المصدر يتبع نمط MVC. مميزاته الرئيسية:\n\n- Artisan CLI Tool\n- Blade Template Engine\n- Eloquent ORM\n- Built-in Security Features\n- Database Migration System\n- Package Management via Composer\n- Unit Testing Support\n- Robust Caching System'
        },
        {
        question: 'ما هو Artisan في Laravel؟',
        answer: 'Artisan هو Command Line Interface (CLI) مدمج في Laravel. يوفر عدة أوامر مفيدة للتطوير مثل:\n\n- php artisan make:controller\n- php artisan make:model\n- php artisan make:migration\n- php artisan serve\n- php artisan cache:clear\n\nيمكن أيضاً إنشاء Custom Commands خاصة بك'
        },
        {
        question: 'اشرح Service Container في Laravel؟',
        answer: 'Service Container هو أداة قوية لإدارة Class Dependencies وتنفيذ Dependency Injection. يقوم بـ:\n\n- Automatic Resolution للـ dependencies\n- Binding Interfaces to Implementations\n- إدارة Singleton Instances\n- تسهيل Unit Testing عبر Mocking'
        },
        {
        question: 'ما هو Eloquent ORM وكيف يعمل؟',
        answer: 'Eloquent هو Object-Relational Mapper (ORM) في Laravel يسمح بـ:\n\n- التعامل مع Database Tables كـ PHP Classes\n- كل Table يمثله Model\n- يدعم Relationships مثل:\n  * One-to-One\n  * One-to-Many\n  * Many-to-Many\n- يوفر Query Builder سهل الاستخدام'
        },
        {
        question: 'ما هي Middleware في Laravel وما هي استخداماتها؟',
        answer: 'Middleware هي طبقة تعمل كـ filter للـ HTTP Requests. استخداماتها:\n\n- Authentication\n- CORS Protection\n- Request Validation\n- API Authentication\n- Session Handling\n\nأنواعها:\n- Global Middleware\n- Route Middleware\n- Group Middleware'
        },
        {
        question: 'كيف تعمل Authentication في Laravel؟',
        answer: 'Laravel يوفر نظام Authentication متكامل يتضمن:\n\n- Built-in Authentication System\n- Multiple Authentication Guards\n- Session-based Authentication\n- Token-based Authentication\n- Social Authentication via Socialite\n- Password Reset Features\n- Email Verification'
        },
        {
        question: 'ما هو Blade Template Engine وما مميزاته؟',
        answer: 'Blade هو Template Engine خاص بـ Laravel يوفر:\n\n- Syntax مبسط للـ PHP\n- Template Inheritance via @extends\n- Sections via @section و @yield\n- Components via @component\n- Directives مثل:\n  * @if, @foreach, @while\n  * @auth, @guest\n  * @include\n- Custom Directives'
        },
        {
        question: 'ما هي Database Migrations وما أهميتها؟',
        answer: 'Migrations هي نظام Version Control للـ Database يتيح:\n\n- إنشاء وتعديل Database Schema\n- مشاركة Database Structure مع المطورين\n- التحكم في نسخ Database\n- Rollback للتغييرات\n\nأوامر مهمة:\n- php artisan make:migration\n- php artisan migrate\n- php artisan migrate:rollback'
        },
        {
        question: 'ما هو الفرق بين soft delete و hard delete في Laravel؟',
        answer: '- Soft Delete:\n  * يضيف حقل deleted_at للـ record\n  * البيانات تبقى في Database\n  * يمكن استرجاع البيانات\n  * يستخدم trait SoftDeletes\n\n- Hard Delete:\n  * حذف نهائي للـ record من Database\n  * لا يمكن استرجاع البيانات\n  * يستخدم دالة delete()'
        },
        {
        question: 'ما هي Events و Listeners في Laravel؟',
        answer: 'Events و Listeners تستخدم لفصل جوانب التطبيق:\n\n- Events: تمثل حدث معين في التطبيق\n- Listeners: تستجيب للـ Events\n\nمميزات:\n- Decoupled Architecture\n- Async Operations\n- Multiple Listeners per Event\n- Event Broadcasting'
        },
        {
        question: 'ما هو Queue System في Laravel؟',
        answer: 'Queue System يستخدم لتأجيل معالجة المهام الثقيلة مثل:\n\n- إرسال Emails\n- Image Processing\n- File Uploads\n- External API Calls\n\nيدعم عدة Drivers:\n- Database\n- Redis\n- Amazon SQS\n- Beanstalkd'
        },
        {
        question: 'كيف يعمل Laravel Sanctum وما استخداماته؟',
        answer: 'Sanctum هو نظام Authentication خفيف يستخدم لـ:\n\n- SPA Authentication\n- API Token Authentication\n- Mobile App Authentication\n\nمميزات:\n- Token-based Authentication\n- Multiple Guards\n- API Rate Limiting\n- Cookie-based Session Authentication'
        },
        {
        question: 'ما هي Service Providers في Laravel؟',
        answer: 'Service Providers هي نقطة Bootstrap الرئيسية للتطبيق:\n\n- تسجيل Service Container Bindings\n- Event Listeners\n- Middleware\n- Routes\n\nأنواعها:\n- Application Providers\n- Package Providers\n- Deferred Providers'
        },
        {
        question: 'كيف تعمل Validation في Laravel؟',
        answer: 'Laravel يوفر عدة طرق للـ Validation:\n\n- Form Request Validation\n- Controller Validation\n- Custom Validation Rules\n\nمميزات:\n- Built-in Validation Rules\n- Custom Error Messages\n- Localization Support\n- Array Validation'
        },
        {
        question: 'ما هو Facade Pattern في Laravel؟',
        answer: 'Facades توفر واجهة "static" للـ classes في Service Container:\n\n- سهولة الاستخدام\n- Syntactic Sugar للـ Service Container\n- Testing Flexibility\n\nأمثلة شائعة:\n- Route\n- Auth\n- Cache\n- DB'
        },
        {
        question: 'كيف يتم التعامل مع Caching في Laravel؟',
        answer: 'Laravel يدعم عدة Cache Drivers:\n\n- File\n- Database\n- Memcached\n- Redis\n\nعمليات Cache الأساسية:\n- Cache::get()\n- Cache::put()\n- Cache::remember()\n- Cache::forget()\n- Cache::tags()'
        },
        {
        question: 'ما هي Collections في Laravel وكيف تستخدم؟',
        answer: 'Collections هي wrapper حول Arrays توفر:\n\n- Method Chaining\n- Helper Functions مثل:\n  * map()\n  * filter()\n  * reduce()\n  * sort()\n  * groupBy()\n- Lazy Collections للـ Large Datasets'
        },
        {
        question: 'كيف تعمل Authorization في Laravel؟',
        answer: 'Laravel يوفر نظام Authorization عبر:\n\n- Gates: تعريف logic مركزي\n- Policies: ربط logic بـ Models\n- Middleware: التحقق على مستوى Routes\n\nاستخدام:\n- can()\n- authorize()\n- @can directive'
        },
        {
        question: 'ما هو Laravel Dusk وكيف يستخدم؟',
        answer: 'Dusk هو Browser Testing Framework يتيح:\n\n- Browser Automation\n- Testing JavaScript\n- Screenshot Capture\n- Database Assertions\n- Page Object Pattern Support\n- Custom Element Selection'
        },
        {
        question: 'كيف تعمل Job Scheduling في Laravel؟',
        answer: 'Task Scheduler يتيح جدولة المهام المتكررة:\n\n- تحديد Cron Schedules\n- تنفيذ Artisan Commands\n- Queue Jobs\n- Shell Commands\n\nمثال:\n- ->daily()\n- ->weekly()\n- ->monthly()'
        },

        {
        question: 'ما هو Repository Pattern وكيف يطبق في Laravel؟',
        answer: 'Repository Pattern يفصل Logic التعامل مع Data:\n\n- فصل Business Logic عن Data Access Layer\n- سهولة تغيير Data Source\n- تحسين Code Reusability\n\nالتطبيق:\n- إنشاء Interface\n- تنفيذ Repository Class\n- استخدام Service Container للـ Binding'
        },
        {
        question: 'كيف يتم التعامل مع File Storage في Laravel?',
        answer: 'Laravel يوفر File System Abstraction:\n\n- Local Storage\n- Amazon S3\n- FTP\n- Multiple Disks\n\nFeatures:\n- File Upload\n- File Download\n- File Visibility\n- Custom File Systems'
        },
        {
        question: 'ما هي Rate Limiting في Laravel وكيف تستخدم؟',
        answer: 'Rate Limiting تحد من تكرار الطلبات:\n\n- API Rate Limiting\n- Route Rate Limiting\n- Dynamic Rate Limits\n\nتطبيق عبر:\n- Middleware\n- Cache Drivers\n- Custom Limitations'
        },
        {
        question: 'كيف يتم تنفيذ Real-time Features في Laravel?',
        answer: 'Laravel يدعم Real-time عبر:\n\n- Broadcasting System\n- Pusher\n- Socket.io\n- Laravel Echo\n\nFeatures:\n- Private Channels\n- Presence Channels\n- Event Broadcasting'
        },
        {
        question: 'ما هو Laravel Horizon وما استخداماته؟',
        answer: 'Horizon يوفر Dashboard للـ Redis Queue:\n\n- Queue Monitoring\n- Job Metrics\n- Failed Jobs\n- Process Management\n\nFeatures:\n- Real-time Monitoring\n- Job Retries\n- Custom Metrics'
        },
        {
        question: 'كيف يتم التعامل مع Localization في Laravel?',
        answer: 'Laravel يدعم Multi-language عبر:\n\n- Language Files\n- Translation Strings\n- Blade Directives\n\nFeatures:\n- Fallback Locales\n- JSON Translations\n- Dynamic Locale Switching'
        },
        {
        question: 'ما هو Laravel Scout وكيف يستخدم؟',
        answer: 'Scout هو Full-text Search Solution:\n\n- Algolia Integration\n- Custom Drivers\n- Searchable Models\n\nFeatures:\n- Async Indexing\n- Search Query Building\n- Custom Indexing Logic'
        },
        {
        question: 'كيف تتم معالجة Exceptions في Laravel?',
        answer: 'Laravel يوفر Exception Handling System:\n\n- Custom Exception Handler\n- Error Pages\n- Exception Reporting\n\nFeatures:\n- Custom Error Messages\n- Error Logging\n- Development/Production Modes'
        },
        {
        question: 'ما هو Laravel Mix وكيف يستخدم؟',
        answer: 'Mix هو Webpack Wrapper يستخدم لـ:\n\n- Asset Compilation\n- SASS/LESS Processing\n- JavaScript Modules\n- Version Hash\n\nFeatures:\n- Hot Module Replacement\n- Code Splitting\n- Source Maps'
        },
        {
        question: 'كيف يتم تنفيذ API Versioning في Laravel?',
        answer: 'API Versioning يمكن تنفيذه عبر:\n\n- URL Versioning\n- Header Versioning\n- Custom Namespace\n\nBest Practices:\n- API Resources\n- Version Prefixes\n- Documentation\n- Rate Limiting'
        }
    ],
////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    uiux:[
        {
            question: 'ما هو الفرق بين UI و UX؟',
            answer: '- User Interface (UI):\n  * يركز على المظهر البصري للمنتج\n  * تصميم العناصر التفاعلية\n  * اختيار الألوان والخطوط والأشكال\n\n- User Experience (UX):\n  * يركز على تجربة المستخدم الشاملة\n  * سهولة الاستخدام والتنقل\n  * فهم احتياجات المستخدم\n  * تحسين رضا المستخدم'
            },
            {
            question: 'ما هي عناصر User Experience Design الأساسية؟',
            answer: 'تتكون UX من خمسة عناصر أساسية:\n\n1. Strategy Plane:\n  * User Needs\n  * Business Goals\n\n2. Scope Plane:\n  * Features\n  * Requirements\n\n3. Structure Plane:\n  * Information Architecture\n  * User Flow\n\n4. Skeleton Plane:\n  * Navigation\n  * Layout\n\n5. Surface Plane:\n  * Visual Design\n  * Branding'
            },
            {
            question: 'ما هي أهم مبادئ Design Thinking؟',
            answer: 'Design Thinking يتكون من خمس مراحل:\n\n1. Empathize:\n  * فهم احتياجات المستخدم\n  * البحث والملاحظة\n\n2. Define:\n  * تحديد المشكلة\n  * صياغة Point of View\n\n3. Ideate:\n  * توليد الأفكار\n  * Brainstorming\n\n4. Prototype:\n  * إنشاء نماذج أولية\n\n5. Test:\n  * اختبار الحلول\n  * جمع Feedback'
            },
            {
            question: 'ما هي Usability Heuristics لـ Nielsen؟',
            answer: 'Nielsen\'s 10 Usability Heuristics:\n\n1. Visibility of System Status\n2. Match Between System and Real World\n3. User Control and Freedom\n4. Consistency and Standards\n5. Error Prevention\n6. Recognition Rather Than Recall\n7. Flexibility and Efficiency\n8. Aesthetic and Minimalist Design\n9. Help Users with Errors\n10. Help and Documentation'
            },
            {
            question: 'ما هي أنواع User Research المختلفة؟',
            answer: 'User Research Methods:\n\n1. Qualitative:\n  * User Interviews\n  * Focus Groups\n  * Contextual Inquiry\n\n2. Quantitative:\n  * Surveys\n  * Analytics\n  * A/B Testing\n\n3. Behavioral:\n  * Usability Testing\n  * Eye Tracking\n  * Heat Maps\n\n4. Attitudinal:\n  * Satisfaction Surveys\n  * Card Sorting'
            },
            {
            question: 'ما هو Information Architecture وما أهميته؟',
            answer: 'Information Architecture (IA):\n\n1. الأهمية:\n  * تنظيم المحتوى\n  * تسهيل الوصول للمعلومات\n  * تحسين User Navigation\n\n2. عناصر IA:\n  * Organization Systems\n  * Labeling Systems\n  * Navigation Systems\n  * Search Systems\n\n3. أدوات:\n  * Site Maps\n  * User Flows\n  * Content Inventory'
            },
            {
            question: 'كيف تقوم بإجراء Usability Testing؟',
            answer: 'خطوات Usability Testing:\n\n1. Planning:\n  * تحديد الأهداف\n  * اختيار المشاركين\n  * تجهيز Test Scenarios\n\n2. Conducting:\n  * Think-aloud Protocol\n  * Task Completion\n  * Observation\n\n3. Analysis:\n  * تحليل النتائج\n  * تحديد Issues\n  * اقتراح Solutions'
            },
            {
            question: 'ما هي أهم Design Principles في UI؟',
            answer: 'UI Design Principles:\n\n1. Visual Hierarchy:\n  * Size\n  * Color\n  * Contrast\n\n2. White Space:\n  * Readability\n  * Focus\n\n3. Color Theory:\n  * Color Psychology\n  * Color Harmony\n\n4. Typography:\n  * Readability\n  * Hierarchy\n\n5. Consistency:\n  * Visual Elements\n  * Patterns'
            },
            {
            question: 'كيف تقوم بإنشاء Wireframes وما أهميتها؟',
            answer: 'Wireframes:\n\n1. الأهمية:\n  * تخطيط Layout\n  * تحديد Content Priority\n  * تسهيل Feedback\n\n2. أنواع:\n  * Low-fidelity\n  * Mid-fidelity\n  * High-fidelity\n\n3. أدوات:\n  * Sketch\n  * Figma\n  * Adobe XD'
            },
            {
            question: 'ما هي Accessibility Guidelines الأساسية في التصميم؟',
            answer: 'Accessibility Guidelines:\n\n1. Color:\n  * Color Contrast\n  * Color Blindness\n\n2. Typography:\n  * Font Size\n  * Line Height\n  * Text Spacing\n\n3. Navigation:\n  * Keyboard Access\n  * Screen Readers\n\n4. Content:\n  * Alt Text\n  * Clear Headings\n  * Simple Language'
            },
            {
            question: 'كيف تقوم بإجراء A/B Testing؟',
            answer: 'A/B Testing Process:\n\n1. Planning:\n  * تحديد Goals\n  * اختيار Variables\n  * تحديد Metrics\n\n2. Implementation:\n  * إنشاء Variants\n  * تقسيم Users\n  * جمع Data\n\n3. Analysis:\n  * تحليل Results\n  * Statistical Significance\n  * اتخاذ Decisions'
            },
            {
            question: 'ما هي أهم Interaction Design Patterns؟',
            answer: 'Interaction Patterns:\n\n1. Navigation:\n  * Hamburger Menu\n  * Breadcrumbs\n  * Tabs\n\n2. Data Input:\n  * Forms\n  * Search\n  * Filters\n\n3. Feedback:\n  * Progress Bars\n  * Loading States\n  * Notifications\n\n4. Social:\n  * Likes\n  * Comments\n  * Sharing'
            },
            {
            question: 'كيف تقوم بإنشاء Style Guide؟',
            answer: 'Style Guide Components:\n\n1. Visual Elements:\n  * Colors\n  * Typography\n  * Icons\n  * Spacing\n\n2. Components:\n  * Buttons\n  * Forms\n  * Cards\n\n3. Guidelines:\n  * Usage Rules\n  * Best Practices\n  * Examples'
            },
            {
            question: 'ما هي Mobile-First Design Principles؟',
            answer: 'Mobile-First Principles:\n\n1. Content Priority:\n  * Essential Content First\n  * Progressive Enhancement\n\n2. Design Elements:\n  * Touch Targets\n  * Readable Text\n  * Simple Navigation\n\n3. Performance:\n  * Fast Loading\n  * Optimized Images\n  * Minimal Animation'
            },
            {
            question: 'كيف تقوم بتصميم Micro-interactions؟',
            answer: 'Micro-interactions:\n\n1. Elements:\n  * Trigger\n  * Rules\n  * Feedback\n  * Loops\n\n2. Examples:\n  * Button States\n  * Form Validation\n  * Loading Animation\n\n3. Best Practices:\n  * Subtle\n  * Purposeful\n  * Consistent'
            },
            {
            question: 'ما هي Card Sorting Technique؟',
            answer: 'Card Sorting:\n\n1. Types:\n  * Open Sorting\n  * Closed Sorting\n  * Hybrid Sorting\n\n2. Process:\n  * Preparation\n  * Execution\n  * Analysis\n\n3. Benefits:\n  * Information Architecture\n  * User Mental Models\n  * Navigation Structure'
            },
            {
            question: 'كيف تقوم بإجراء Competitive Analysis؟',
            answer: 'Competitive Analysis:\n\n1. Research Areas:\n  * Features\n  * Design Patterns\n  * User Experience\n\n2. Methods:\n  * Feature Comparison\n  * Usability Review\n  * SWOT Analysis\n\n3. Deliverables:\n  * Comparison Matrix\n  * Insights Report\n  * Recommendations'
            },
            {
            question: 'ما هي Gestalt Principles في التصميم؟',
            answer: 'Gestalt Principles:\n\n1. Similarity:\n  * Visual Elements\n  * Grouping\n\n2. Proximity:\n  * Spatial Relationships\n  * Grouping\n\n3. Continuation:\n  * Visual Flow\n  * Direction\n\n4. Closure:\n  * Complete Forms\n  * Patterns'
            },
            {
            question: 'كيف تقوم بتصميم Forms؟',
            answer: 'Form Design:\n\n1. Structure:\n  * Logical Flow\n  * Grouping\n  * Progressive Disclosure\n\n2. Elements:\n  * Clear Labels\n  * Error States\n  * Validation\n\n3. Best Practices:\n  * Single Column\n  * Clear CTAs\n  * Inline Validation'
            },
            {
            question: 'ما هي Design Systems وكيف تنشئها؟',
            answer: 'Design Systems:\n\n1. Components:\n  * UI Kit\n  * Style Guide\n  * Pattern Library\n\n2. Documentation:\n  * Usage Guidelines\n  * Code Examples\n  * Best Practices\n\n3. Maintenance:\n  * Version Control\n  * Updates\n  * Team Collaboration'
            },
            {
            question: 'ما هي طرق قياس UX Success؟',
            answer: 'UX Metrics:\n\n1. Quantitative:\n  * Conversion Rate\n  * Task Success Rate\n  * Time on Task\n\n2. Qualitative:\n  * User Satisfaction\n  * Net Promoter Score\n  * User Feedback\n\n3. Business Metrics:\n  * ROI\n  * Customer Retention\n  * Support Tickets'
            },
            {
            question: 'كيف تقوم بإجراء User Interviews؟',
            answer: 'User Interviews:\n\n1. Preparation:\n  * Interview Guide\n  * Participant Screening\n  * Setting\n\n2. Techniques:\n  * Open Questions\n  * Active Listening\n  * Follow-up Questions\n\n3. Analysis:\n  * Patterns\n  * Insights\n  * Recommendations'
            },
            {
            question: 'ما هي أفضل ممارسات Responsive Design؟',
            answer: 'Responsive Design:\n\n1. Layout:\n  * Fluid Grids\n  * Flexible Images\n  * Media Queries\n\n2. Content:\n  * Priority Content\n  * Readable Text\n  * Touch Targets\n\n3. Performance:\n  * Image Optimization\n  * Loading Speed\n  * Minimal Code'
            },
            {
            question: 'كيف تقوم بتصميم Navigation Systems؟',
            answer: 'Navigation Design:\n\n1. Types:\n  * Global Navigation\n  * Local Navigation\n  * Contextual Navigation\n\n2. Principles:\n  * Clarity\n  * Consistency\n  * Feedback\n\n3. Patterns:\n  * Menu Structures\n  * Search\n  * Filters'
            },
            {
            question: 'ما هي Color Theory وكيف تطبقها؟',
            answer: 'Color Theory:\n\n1. Basics:\n  * Color Wheel\n  * Color Harmony\n  * Color Psychology\n\n2. Applications:\n  * Brand Identity\n  * UI Elements\n  * Accessibility\n\n3. Guidelines:\n  * Contrast\n  * Hierarchy\n  * Consistency'
            },
            {
            question: 'كيف تقوم بتصميم Onboarding Experience؟',
            answer: 'Onboarding Design:\n\n1. Elements:\n  * Welcome Screen\n  * Key Features\n  * Progress Indicators\n\n2. Principles:\n  * Progressive\n  * Interactive\n  * Value-focused\n\n3. Best Practices:\n  * Minimal Steps\n  * Clear Value\n  * Quick Wins'
            },
            {
            question: 'ما هي طرق Visual Hierarchy؟',
            answer: 'Visual Hierarchy:\n\n1. Elements:\n  * Size\n  * Color\n  * Contrast\n  * Space\n\n2. Principles:\n  * F-Pattern\n  * Z-Pattern\n  * Grid Systems\n\n3. Applications:\n  * Typography\n  * Layout\n  * Content Structure'
            },
            {
            question: 'كيف تقوم بإجراء Persona Development؟',
            answer: 'Persona Development:\n\n1. Research:\n  * User Data\n  * Demographics\n  * Behaviors\n\n2. Components:\n  * Goals\n  * Pain Points\n  * Scenarios\n\n3. Applications:\n  * Design Decisions\n  * Feature Priority\n  * Content Strategy'
            },
            {
            question: 'ما هي Error Prevention Strategies؟',
            answer: 'Error Prevention:\n\n1. Design Strategies:\n  * Clear Instructions\n  * Confirmation Dialogs\n  * Undo Options\n\n2. Validation:\n  * Real-time Feedback\n  * Input Constraints\n  * Clear Error Messages\n\n3. Recovery:\n  * Error Messages\n  * Recovery Options\n  * Help Resources'
            }
    ]
  
  
  
    // يمكن إضافة المزيد من الأقسام والأسئلة هنا
  };